#include "rack.hpp"
#include <vector>
#include "plugin.hpp"
#include <random> 
#include "dsp/digital.hpp"  // For utilities like `mix` and other DSP-related functions

using namespace rack;

struct Muskrat : Module {
    enum ParamId {
        TAIL_PARAM,
        RANGE_PARAM,
        SCRATCH_PARAM,
        DIG_PARAM,
        CHEW_PARAM,
        RATSWITCH_PARAM,
        SELECT_PARAM,
        PARAMS_LEN
    };
    enum InputId {
        BANG_INPUT,
        SCRATCH_CV_INPUT,
        DIG_CV_INPUT,
        CHEW_CV_INPUT,
        MUSKRAT_INPUT,
        INPUTS_LEN
    };
    enum OutputId {
        AUDIO_OUTPUT,
        OUTPUTS_LEN
    };
    enum LightId {
        LED_LIGHT,
        LIGHTS_LEN
    };

 // Constructor
 Muskrat() {
	config(PARAMS_LEN, INPUTS_LEN, OUTPUTS_LEN, LIGHTS_LEN);
	configParam(TAIL_PARAM, 0.f, 1.f, 0.5f, "Tail");
	configParam(RANGE_PARAM, 0.f, 2.f, 1.f, "Range");
	configParam(SCRATCH_PARAM, 0.f, 1.f, 0.5f, "Scratch");
	configParam(DIG_PARAM, 0.f, 1.f, 0.5f, "Dig");
	configParam(CHEW_PARAM, 0.f, 1.f, 0.5f, "Chew");
	configInput(BANG_INPUT, "Bang");
	configInput(SCRATCH_CV_INPUT, "Scratch CV");
	configInput(DIG_CV_INPUT, "Dig CV");
	configInput(CHEW_CV_INPUT, "Chew CV");
	configParam(RATSWITCH_PARAM, 0.f, 1.f, 0.f, "Ratswitch");
	configInput(MUSKRAT_INPUT, "Ratswitch CV");
	configOutput(AUDIO_OUTPUT, "Muskrat");
  configParam(SELECT_PARAM, 0.f, 1.f, 0.f, "Algorithm");

}

const static int WAVETABLE_SIZE = 238;
const static int WAVETABLE_SIZE_GRANULAR = 318;

const unsigned char one_wav[WAVETABLE_SIZE] = {
	0x80, 0x85, 0x9d, 0xbc, 0xc7, 0xc5, 0xbb, 0xac, 0xa2, 0x9e, 0xa2, 0xa6,
	0xa4, 0x95, 0x7b, 0x5d, 0x45, 0x3b, 0x41, 0x4f, 0x5a, 0x57, 0x45, 0x2b,
	0x17, 0x19, 0x37, 0x6c, 0xa7, 0xd6, 0xeb, 0xe5, 0xcd, 0xb3, 0xa5, 0xa6,
	0xb3, 0xc0, 0xc1, 0xb3, 0x98, 0x79, 0x62, 0x58, 0x58, 0x5d, 0x60, 0x5a,
	0x4e, 0x40, 0x38, 0x3b, 0x49, 0x5e, 0x76, 0x88, 0x91, 0x90, 0x88, 0x7d,
	0x75, 0x75, 0x7f, 0x91, 0xa6, 0xb8, 0xc2, 0xc3, 0xbd, 0xb4, 0xad, 0xa8,
	0xa2, 0x98, 0x85, 0x6c, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x69, 0x62, 0x47,
	0x23, 0x07, 0x04, 0x23, 0x5e, 0xa4, 0xdf, 0xfd, 0xf9, 0xdd, 0xb8, 0x9d,
	0x95, 0x9f, 0xb0, 0xbd, 0xbb, 0xab, 0x92, 0x78, 0x66, 0x5b, 0x56, 0x51,
	0x4a, 0x42, 0x3c, 0x3e, 0x48, 0x5a, 0x6f, 0x81, 0x8b, 0x8b, 0x83, 0x78,
	0x70, 0x6f, 0x78, 0x8a, 0xa2, 0xb7, 0xc5, 0xc7, 0xbf, 0xb1, 0xa4, 0x9e,
	0xa0, 0xa5, 0xa6, 0x9b, 0x84, 0x66, 0x4b, 0x3c, 0x3e, 0x4b, 0x58, 0x5a,
	0x4c, 0x33, 0x1b, 0x16, 0x2b, 0x5a, 0x95, 0xcb, 0xe3, 0xd6, 0xba, 0x9f,
	0x8f, 0x89, 0x85, 0x80, 0x4c, 0x49, 0x53, 0x54, 0x1a, 0x00, 0x00, 0x00,
	0x49, 0x4e, 0x46, 0x4f, 0x49, 0x4e, 0x41, 0x4d, 0x04, 0x00, 0x00, 0x00,
	0x31, 0x30, 0x72, 0x00, 0x49, 0x54, 0x52, 0x4b, 0x02, 0x00, 0x00, 0x00,
	0x31, 0x00, 0x69, 0x64, 0x33, 0x20, 0x24, 0x00, 0x00, 0x00, 0x49, 0x44,
	0x33, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x54, 0x52, 0x43, 0x4b,
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x31, 0x54, 0x49, 0x54, 0x32,
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x31, 0x30, 0x72
  };
const unsigned char two_wav[WAVETABLE_SIZE] = {
	0x80, 0x90, 0xc8, 0xfe, 0xf7, 0xd8, 0xb7, 0xa0, 0x9d, 0xaa, 0xbc, 0xc6,
	0xc3, 0xb0, 0x98, 0x80, 0x6f, 0x66, 0x61, 0x5c, 0x54, 0x4c, 0x47, 0x49,
	0x54, 0x66, 0x79, 0x88, 0x8e, 0x8c, 0x82, 0x76, 0x6e, 0x6e, 0x77, 0x8a,
	0x9f, 0xb2, 0xbc, 0xbb, 0xb1, 0xa3, 0x97, 0x92, 0x95, 0x99, 0x98, 0x8b,
	0x73, 0x56, 0x3e, 0x33, 0x38, 0x46, 0x53, 0x53, 0x43, 0x2b, 0x17, 0x18,
	0x33, 0x66, 0xa1, 0xd2, 0xeb, 0xe8, 0xd3, 0xbb, 0xac, 0xad, 0xb9, 0xc7,
	0xcb, 0xbe, 0xa5, 0x88, 0x71, 0x65, 0x64, 0x69, 0x6c, 0x67, 0x5b, 0x4d,
	0x43, 0x44, 0x4f, 0x62, 0x78, 0x8a, 0x92, 0x91, 0x89, 0x7d, 0x73, 0x71,
	0x79, 0x88, 0x9c, 0xad, 0xb7, 0xb8, 0xb2, 0xa9, 0xa2, 0x9c, 0x97, 0x8d,
	0x7c, 0x64, 0x4b, 0x3b, 0x38, 0x43, 0x55, 0x61, 0x5d, 0x46, 0x24, 0x08,
	0x03, 0x1e, 0x57, 0x9c, 0xd9, 0xfb, 0xfc, 0xe3, 0xc0, 0xa5, 0x9c, 0xa5,
	0xb7, 0xc5, 0xc5, 0xb7, 0xa0, 0x87, 0x74, 0x68, 0x62, 0x5e, 0x57, 0x4f,
	0x48, 0x48, 0x50, 0x60, 0x73, 0x84, 0x8d, 0x8d, 0x85, 0x7b, 0x75, 0x75,
	0x7b, 0x80, 0x83, 0x7e, 0x4c, 0x49, 0x53, 0x54, 0x1a, 0x00, 0x00, 0x00,
	0x49, 0x4e, 0x46, 0x4f, 0x49, 0x4e, 0x41, 0x4d, 0x04, 0x00, 0x00, 0x00,
	0x31, 0x31, 0x72, 0x00, 0x49, 0x54, 0x52, 0x4b, 0x02, 0x00, 0x00, 0x00,
	0x32, 0x00, 0x69, 0x64, 0x33, 0x20, 0x24, 0x00, 0x00, 0x00, 0x49, 0x44,
	0x33, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x54, 0x52, 0x43, 0x4b,
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x32, 0x54, 0x49, 0x54, 0x32,
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x31, 0x31, 0x72
  };
const unsigned char three_wav[WAVETABLE_SIZE] = {
	0x7f, 0x8a, 0x76, 0x3a, 0x3e, 0x79, 0x97, 0x7a, 0x5f, 0x84, 0xb9, 0xae,
	0x6f, 0x5f, 0x9b, 0xc8, 0x9f, 0x57, 0x52, 0x8d, 0xaa, 0x7c, 0x42, 0x53,
	0x99, 0xb4, 0x7e, 0x49, 0x68, 0xb3, 0xc1, 0x84, 0x5b, 0x79, 0x9d, 0x84,
	0x50, 0x4d, 0x78, 0x83, 0x50, 0x23, 0x45, 0x97, 0xb4, 0x86, 0x70, 0xb6,
	0xfd, 0xcf, 0x5f, 0x47, 0x98, 0xba, 0x60, 0x05, 0x22, 0x7c, 0x8f, 0x5d,
	0x53, 0x99, 0xda, 0xc9, 0x8c, 0x7a, 0xa0, 0xb8, 0x93, 0x64, 0x70, 0x9c,
	0x94, 0x54, 0x3b, 0x76, 0xb5, 0x9f, 0x5b, 0x50, 0x90, 0xc1, 0xa1, 0x61,
	0x5c, 0x96, 0xb5, 0x81, 0x3e, 0x48, 0x8c, 0xa2, 0x6c, 0x40, 0x61, 0x99,
	0x98, 0x70, 0x73, 0xab, 0xcd, 0xa7, 0x6b, 0x6a, 0x9b, 0x9f, 0x53, 0x13,
	0x36, 0x7e, 0x6c, 0x17, 0x17, 0x94, 0xfa, 0xd7, 0x84, 0x8e, 0xda, 0xe2,
	0x92, 0x56, 0x6e, 0x9a, 0x86, 0x47, 0x34, 0x65, 0x95, 0x87, 0x62, 0x72,
	0xad, 0xba, 0x82, 0x5b, 0x84, 0xc2, 0xb4, 0x6a, 0x4a, 0x79, 0xaa, 0x90,
	0x4f, 0x44, 0x83, 0xb6, 0x94, 0x52, 0x54, 0x9f, 0xc4, 0x95, 0x6b, 0x74,
	0x89, 0x84, 0x7c, 0x7f, 0x4c, 0x49, 0x53, 0x54, 0x1a, 0x00, 0x00, 0x00,
	0x49, 0x4e, 0x46, 0x4f, 0x49, 0x4e, 0x41, 0x4d, 0x04, 0x00, 0x00, 0x00,
	0x31, 0x32, 0x72, 0x00, 0x49, 0x54, 0x52, 0x4b, 0x02, 0x00, 0x00, 0x00,
	0x33, 0x00, 0x69, 0x64, 0x33, 0x20, 0x24, 0x00, 0x00, 0x00, 0x49, 0x44,
	0x33, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x54, 0x52, 0x43, 0x4b,
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x33, 0x54, 0x49, 0x54, 0x32,
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x31, 0x32, 0x72
  };
const unsigned char four_wav[WAVETABLE_SIZE] = {
	0x80, 0x82, 0xbd, 0xe3, 0x93, 0x54, 0x6c, 0x9a, 0x89, 0x4c, 0x38, 0x63,
	0x91, 0x88, 0x69, 0x73, 0xa4, 0xb3, 0x88, 0x64, 0x82, 0xb6, 0xb0, 0x73,
	0x52, 0x74, 0xa1, 0x91, 0x58, 0x48, 0x7e, 0xb0, 0x95, 0x57, 0x57, 0x9c,
	0xc3, 0x97, 0x61, 0x6f, 0x9a, 0x90, 0x5a, 0x49, 0x72, 0x8a, 0x61, 0x29,
	0x37, 0x84, 0xb2, 0x91, 0x6c, 0x99, 0xec, 0xe6, 0x7f, 0x42, 0x7a, 0xba,
	0x89, 0x20, 0x0d, 0x5e, 0x95, 0x76, 0x4f, 0x75, 0xc4, 0xd9, 0xa5, 0x75,
	0x88, 0xb2, 0xa9, 0x74, 0x62, 0x8a, 0x9f, 0x6f, 0x3e, 0x5c, 0xa3, 0xad,
	0x71, 0x4e, 0x7a, 0xb4, 0xac, 0x73, 0x5c, 0x85, 0xac, 0x91, 0x54, 0x46,
	0x77, 0x9b, 0x7e, 0x4f, 0x57, 0x88, 0x99, 0x7c, 0x6e, 0x96, 0xc5, 0xb7,
	0x7b, 0x62, 0x8b, 0xaa, 0x74, 0x20, 0x21, 0x70, 0x86, 0x35, 0x04, 0x62,
	0xe7, 0xf0, 0x95, 0x77, 0xbf, 0xec, 0xb1, 0x5f, 0x5d, 0x90, 0x96, 0x5e,
	0x36, 0x52, 0x87, 0x90, 0x71, 0x6a, 0x95, 0xb5, 0x98, 0x69, 0x72, 0xa9,
	0xba, 0x87, 0x55, 0x64, 0x97, 0x9d, 0x69, 0x45, 0x6a, 0xa0, 0x99, 0x73,
	0x6b, 0x81, 0x87, 0x80, 0x4c, 0x49, 0x53, 0x54, 0x1a, 0x00, 0x00, 0x00,
	0x49, 0x4e, 0x46, 0x4f, 0x49, 0x4e, 0x41, 0x4d, 0x04, 0x00, 0x00, 0x00,
	0x31, 0x33, 0x72, 0x00, 0x49, 0x54, 0x52, 0x4b, 0x02, 0x00, 0x00, 0x00,
	0x34, 0x00, 0x69, 0x64, 0x33, 0x20, 0x24, 0x00, 0x00, 0x00, 0x49, 0x44,
	0x33, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x54, 0x52, 0x43, 0x4b,
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x34, 0x54, 0x49, 0x54, 0x32,
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x31, 0x33, 0x72
  
  };
const unsigned char five_wav[WAVETABLE_SIZE] = {
	0x7f, 0x80, 0x81, 0x7e, 0x7c, 0x80, 0x84, 0x83, 0x7f, 0x7f, 0x83, 0x87,
	0x85, 0x80, 0x81, 0x87, 0x89, 0x85, 0x7f, 0x81, 0x88, 0x8a, 0x82, 0x7c,
	0x81, 0x89, 0x88, 0x7d, 0x78, 0x80, 0x88, 0x81, 0x6e, 0x68, 0x79, 0x85,
	0x67, 0x28, 0x03, 0x2d, 0x95, 0xed, 0xf8, 0xc0, 0x87, 0x79, 0x8c, 0x97,
	0x8a, 0x79, 0x78, 0x83, 0x87, 0x7e, 0x75, 0x78, 0x81, 0x82, 0x7a, 0x75,
	0x79, 0x7f, 0x7f, 0x78, 0x76, 0x7a, 0x7f, 0x7e, 0x79, 0x78, 0x7e, 0x81,
	0x7f, 0x7b, 0x7c, 0x81, 0x83, 0x80, 0x7d, 0x7f, 0x83, 0x84, 0x81, 0x7f,
	0x81, 0x85, 0x85, 0x81, 0x80, 0x83, 0x85, 0x84, 0x80, 0x7f, 0x82, 0x84,
	0x82, 0x7e, 0x7e, 0x82, 0x83, 0x7f, 0x7c, 0x7d, 0x81, 0x81, 0x7d, 0x7b,
	0x7d, 0x80, 0x7f, 0x7b, 0x7a, 0x7c, 0x7f, 0x7e, 0x7a, 0x7a, 0x7e, 0x80,
	0x7e, 0x7b, 0x7c, 0x80, 0x82, 0x7f, 0x7c, 0x7e, 0x83, 0x84, 0x80, 0x7e,
	0x82, 0x87, 0x86, 0x81, 0x80, 0x85, 0x89, 0x87, 0x80, 0x80, 0x86, 0x8a,
	0x85, 0x7d, 0x7e, 0x87, 0x89, 0x81, 0x78, 0x7c, 0x87, 0x84, 0x77, 0x72,
	0x7a, 0x81, 0x7e, 0x7f, 0x4c, 0x49, 0x53, 0x54, 0x1a, 0x00, 0x00, 0x00,
	0x49, 0x4e, 0x46, 0x4f, 0x49, 0x4e, 0x41, 0x4d, 0x04, 0x00, 0x00, 0x00,
	0x31, 0x34, 0x72, 0x00, 0x49, 0x54, 0x52, 0x4b, 0x02, 0x00, 0x00, 0x00,
	0x35, 0x00, 0x69, 0x64, 0x33, 0x20, 0x24, 0x00, 0x00, 0x00, 0x49, 0x44,
	0x33, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x54, 0x52, 0x43, 0x4b,
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x35, 0x54, 0x49, 0x54, 0x32,
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x31, 0x34, 0x72
  };
const unsigned char six_wav[WAVETABLE_SIZE] = {
	0x81, 0x8a, 0x64, 0xce, 0x4c, 0x76, 0xb6, 0x35, 0x8b, 0x78, 0xa5, 0x3a,
	0xa4, 0xbc, 0x51, 0xa8, 0x55, 0x92, 0x6a, 0x9d, 0x60, 0x2c, 0xfe, 0x61,
	0x7d, 0x88, 0x7e, 0x99, 0x5f, 0xa7, 0x22, 0x9d, 0xa6, 0x55, 0x8e, 0x8b,
	0xb3, 0x37, 0xbb, 0x7c, 0x42, 0xb5, 0x3d, 0x96, 0x7f, 0xad, 0x65, 0x55,
	0xf2, 0x4d, 0x79, 0x6b, 0x76, 0x80, 0x85, 0x9a, 0x22, 0xde, 0x96, 0x60,
	0x88, 0x6c, 0xa4, 0x34, 0xb7, 0x5b, 0x5e, 0xd5, 0x50, 0x97, 0x89, 0xa7,
	0x41, 0x71, 0xbc, 0x39, 0x9a, 0x61, 0x94, 0x8c, 0xa1, 0x90, 0x18, 0xeb,
	0x6c, 0x51, 0x81, 0x66, 0xa5, 0x67, 0xbe, 0x48, 0x8e, 0xc3, 0x49, 0x7d,
	0x6d, 0xa6, 0x34, 0x9e, 0xa9, 0x42, 0xd0, 0x59, 0x8d, 0x83, 0x8f, 0x6a,
	0x25, 0xe4, 0x61, 0x73, 0x8b, 0x81, 0x9d, 0x81, 0xa7, 0x12, 0xab, 0x9f,
	0x44, 0x8c, 0x6b, 0xbe, 0x51, 0xb5, 0x86, 0x3f, 0xcf, 0x44, 0x74, 0x7d,
	0x9e, 0x5e, 0x66, 0xe1, 0x53, 0x99, 0x6e, 0x76, 0x84, 0x79, 0x9a, 0x07,
	0xda, 0xa0, 0x56, 0x9f, 0x6a, 0xa9, 0x5c, 0xa2, 0x4d, 0x60, 0xb5, 0x65,
	0x84, 0x7f, 0x88, 0x7e, 0x4c, 0x49, 0x53, 0x54, 0x1a, 0x00, 0x00, 0x00,
	0x49, 0x4e, 0x46, 0x4f, 0x49, 0x4e, 0x41, 0x4d, 0x04, 0x00, 0x00, 0x00,
	0x31, 0x35, 0x72, 0x00, 0x49, 0x54, 0x52, 0x4b, 0x02, 0x00, 0x00, 0x00,
	0x36, 0x00, 0x69, 0x64, 0x33, 0x20, 0x24, 0x00, 0x00, 0x00, 0x49, 0x44,
	0x33, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x54, 0x52, 0x43, 0x4b,
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x36, 0x54, 0x49, 0x54, 0x32,
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x31, 0x35, 0x72
  };
const unsigned char seven_wav[WAVETABLE_SIZE] = {
	0x85, 0x81, 0x72, 0x2b, 0x5b, 0x80, 0x9d, 0xac, 0x8c, 0xc8, 0xac, 0xa9,
	0x40, 0x57, 0x81, 0xb3, 0x8e, 0x58, 0x57, 0x60, 0x9b, 0x8e, 0x9e, 0x46,
	0x8c, 0x9c, 0xb7, 0x73, 0x57, 0x72, 0x79, 0x7f, 0x3f, 0x54, 0x56, 0x9c,
	0x4e, 0x2c, 0x16, 0xab, 0xf5, 0xc0, 0x8d, 0x70, 0xbd, 0xab, 0xb0, 0x6d,
	0x93, 0x91, 0xa9, 0x62, 0x4c, 0x6d, 0x93, 0xa4, 0x4f, 0x7a, 0x71, 0xb5,
	0xa0, 0x98, 0x51, 0x60, 0x95, 0xb9, 0x97, 0x3d, 0x50, 0x43, 0x7d, 0x47,
	0x7e, 0x8a, 0xc6, 0xbf, 0x7c, 0x62, 0x93, 0xea, 0xae, 0x7d, 0x40, 0x99,
	0x81, 0x7e, 0x3a, 0x44, 0x61, 0x65, 0x7a, 0x4a, 0x76, 0x7c, 0x96, 0x50,
	0x82, 0x95, 0xcc, 0xa6, 0x77, 0x56, 0x30, 0x78, 0x82, 0xae, 0x66, 0x86,
	0x92, 0xb1, 0x88, 0x97, 0xa9, 0xb7, 0xc3, 0x73, 0x7e, 0x6b, 0xbf, 0x76,
	0x41, 0x1e, 0x76, 0xa5, 0x72, 0x40, 0x3b, 0x84, 0x86, 0xbb, 0x83, 0xbf,
	0xb2, 0xb4, 0x5f, 0x41, 0x7a, 0xa1, 0xaa, 0x5b, 0x5f, 0x4f, 0x95, 0x8a,
	0xa7, 0x59, 0x6e, 0xa0, 0xad, 0x95, 0x4e, 0x72, 0x70, 0x89, 0x5d, 0x64,
	0x6d, 0x81, 0x80, 0x7e, 0x4c, 0x49, 0x53, 0x54, 0x1a, 0x00, 0x00, 0x00,
	0x49, 0x4e, 0x46, 0x4f, 0x49, 0x4e, 0x41, 0x4d, 0x04, 0x00, 0x00, 0x00,
	0x31, 0x36, 0x72, 0x00, 0x49, 0x54, 0x52, 0x4b, 0x02, 0x00, 0x00, 0x00,
	0x37, 0x00, 0x69, 0x64, 0x33, 0x20, 0x24, 0x00, 0x00, 0x00, 0x49, 0x44,
	0x33, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x54, 0x52, 0x43, 0x4b,
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x37, 0x54, 0x49, 0x54, 0x32,
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x31, 0x36, 0x72
  };
const unsigned char eight_wav[WAVETABLE_SIZE] = {
	0x80, 0x7d, 0x73, 0x75, 0x8c, 0xa8, 0xb6, 0xab, 0x89, 0x5e, 0x3e, 0x36,
	0x49, 0x67, 0x7c, 0x77, 0x57, 0x2a, 0x07, 0x03, 0x21, 0x57, 0x8c, 0xa7,
	0x9e, 0x7a, 0x4e, 0x31, 0x31, 0x49, 0x69, 0x7c, 0x74, 0x54, 0x2b, 0x0e,
	0x0a, 0x1e, 0x3e, 0x58, 0x61, 0x59, 0x4c, 0x49, 0x58, 0x76, 0x95, 0xa2,
	0x96, 0x75, 0x4e, 0x37, 0x3b, 0x57, 0x79, 0x8e, 0x87, 0x66, 0x3d, 0x24,
	0x2c, 0x56, 0x92, 0xc6, 0xdd, 0xd0, 0xab, 0x84, 0x70, 0x7a, 0x99, 0xba,
	0xc9, 0xbd, 0x9b, 0x75, 0x5f, 0x62, 0x7b, 0x9c, 0xb3, 0xb8, 0xae, 0xa2,
	0xa2, 0xb5, 0xd4, 0xef, 0xf6, 0xe2, 0xbc, 0x96, 0x83, 0x8a, 0xa7, 0xc5,
	0xd1, 0xc0, 0x99, 0x6e, 0x58, 0x64, 0x91, 0xc9, 0xf4, 0xff, 0xe7, 0xba,
	0x92, 0x80, 0x8b, 0xa8, 0xc2, 0xc7, 0xb0, 0x87, 0x5f, 0x49, 0x4e, 0x66,
	0x82, 0x91, 0x8d, 0x7e, 0x70, 0x71, 0x84, 0xa0, 0xb4, 0xb2, 0x96, 0x6b,
	0x45, 0x36, 0x41, 0x5e, 0x78, 0x7c, 0x64, 0x38, 0x0f, 0x00, 0x14, 0x45,
	0x7d, 0xa2, 0xa5, 0x87, 0x5b, 0x37, 0x2e, 0x40, 0x61, 0x7a, 0x7b, 0x6e,
	0x63, 0x63, 0x71, 0x7f, 0x4c, 0x49, 0x53, 0x54, 0x1a, 0x00, 0x00, 0x00,
	0x49, 0x4e, 0x46, 0x4f, 0x49, 0x4e, 0x41, 0x4d, 0x04, 0x00, 0x00, 0x00,
	0x31, 0x37, 0x72, 0x00, 0x49, 0x54, 0x52, 0x4b, 0x02, 0x00, 0x00, 0x00,
	0x38, 0x00, 0x69, 0x64, 0x33, 0x20, 0x24, 0x00, 0x00, 0x00, 0x49, 0x44,
	0x33, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x54, 0x52, 0x43, 0x4b,
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x38, 0x54, 0x49, 0x54, 0x32,
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x31, 0x37, 0x72
  
  };
const unsigned char nine_wav[WAVETABLE_SIZE] = {
	0x81, 0x9c, 0xd6, 0xfb, 0xdf, 0xb1, 0x86, 0x69, 0x61, 0x64, 0x6d, 0x71,
	0x70, 0x6a, 0x67, 0x69, 0x6f, 0x76, 0x7a, 0x7c, 0x81, 0x8e, 0xa6, 0xc6,
	0xe2, 0xec, 0xd9, 0xaa, 0x6b, 0x31, 0x0f, 0x12, 0x37, 0x6e, 0xa3, 0xc4,
	0xcb, 0xbb, 0xa1, 0x8b, 0x81, 0x82, 0x8a, 0x90, 0x91, 0x8d, 0x89, 0x86,
	0x85, 0x81, 0x77, 0x67, 0x55, 0x4d, 0x57, 0x76, 0xa3, 0xce, 0xe4, 0xdb,
	0xb2, 0x77, 0x3f, 0x1e, 0x1d, 0x3b, 0x69, 0x93, 0xad, 0xb2, 0xa6, 0x93,
	0x84, 0x7c, 0x79, 0x78, 0x75, 0x70, 0x6e, 0x70, 0x77, 0x7d, 0x7c, 0x6f,
	0x57, 0x3f, 0x35, 0x42, 0x6a, 0xa1, 0xd5, 0xf1, 0xe9, 0xc0, 0x82, 0x45,
	0x1d, 0x12, 0x22, 0x41, 0x61, 0x77, 0x82, 0x85, 0x87, 0x8b, 0x92, 0x97,
	0x98, 0x94, 0x8f, 0x8e, 0x93, 0x9b, 0x9c, 0x8e, 0x6e, 0x41, 0x17, 0x01,
	0x0d, 0x3b, 0x7f, 0xc3, 0xf2, 0xff, 0xea, 0xc0, 0x92, 0x70, 0x62, 0x63,
	0x6a, 0x71, 0x70, 0x6c, 0x68, 0x68, 0x6d, 0x74, 0x79, 0x7b, 0x7e, 0x88,
	0x9e, 0xbc, 0xdb, 0xec, 0xe2, 0xbb, 0x80, 0x40, 0x1b, 0x23, 0x44, 0x6c,
	0x87, 0x90, 0x89, 0x80, 0x4c, 0x49, 0x53, 0x54, 0x1a, 0x00, 0x00, 0x00,
	0x49, 0x4e, 0x46, 0x4f, 0x49, 0x4e, 0x41, 0x4d, 0x04, 0x00, 0x00, 0x00,
	0x31, 0x38, 0x72, 0x00, 0x49, 0x54, 0x52, 0x4b, 0x02, 0x00, 0x00, 0x00,
	0x39, 0x00, 0x69, 0x64, 0x33, 0x20, 0x24, 0x00, 0x00, 0x00, 0x49, 0x44,
	0x33, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x54, 0x52, 0x43, 0x4b,
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x39, 0x54, 0x49, 0x54, 0x32,
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x31, 0x38, 0x72
  };
const unsigned char ten_wav[WAVETABLE_SIZE] = {
	0x7f, 0x7f, 0x77, 0x65, 0x4c, 0x31, 0x19, 0x0e, 0x11, 0x21, 0x39, 0x51,
	0x67, 0x7a, 0x8b, 0x9b, 0xab, 0xb7, 0xbc, 0xbb, 0xb5, 0xad, 0xa6, 0x9f,
	0x93, 0x7f, 0x61, 0x3d, 0x1c, 0x06, 0x00, 0x09, 0x1b, 0x2d, 0x3a, 0x41,
	0x45, 0x4f, 0x61, 0x7b, 0x99, 0xb3, 0xc5, 0xcb, 0xc9, 0xc0, 0xb4, 0xa4,
	0x91, 0x79, 0x60, 0x4a, 0x3b, 0x34, 0x33, 0x34, 0x32, 0x2d, 0x28, 0x2c,
	0x3d, 0x5c, 0x83, 0xaa, 0xc7, 0xd6, 0xd8, 0xd3, 0xcd, 0xcb, 0xcb, 0xc9,
	0xc1, 0xb1, 0x9a, 0x81, 0x6a, 0x57, 0x48, 0x3d, 0x36, 0x35, 0x3d, 0x50,
	0x6b, 0x89, 0xa3, 0xb4, 0xbd, 0xc1, 0xc8, 0xd5, 0xe7, 0xf8, 0xff, 0xf6,
	0xde, 0xbb, 0x98, 0x7b, 0x68, 0x5d, 0x56, 0x50, 0x49, 0x44, 0x44, 0x4b,
	0x57, 0x67, 0x78, 0x8a, 0x9d, 0xb3, 0xcb, 0xe1, 0xf0, 0xf1, 0xe3, 0xca,
	0xae, 0x96, 0x87, 0x7f, 0x77, 0x6a, 0x55, 0x39, 0x20, 0x10, 0x0e, 0x1b,
	0x31, 0x4a, 0x60, 0x74, 0x85, 0x96, 0xa6, 0xb3, 0xbb, 0xbc, 0xb7, 0xaf,
	0xa9, 0xa1, 0x98, 0x86, 0x6b, 0x48, 0x26, 0x0a, 0x05, 0x1c, 0x37, 0x50,
	0x62, 0x6e, 0x78, 0x7f, 0x4c, 0x49, 0x53, 0x54, 0x1c, 0x00, 0x00, 0x00,
	0x49, 0x4e, 0x46, 0x4f, 0x49, 0x4e, 0x41, 0x4d, 0x04, 0x00, 0x00, 0x00,
	0x31, 0x39, 0x72, 0x00, 0x49, 0x54, 0x52, 0x4b, 0x04, 0x00, 0x00, 0x00,
	0x31, 0x30, 0x00, 0x00, 0x69, 0x64, 0x33, 0x20, 0x26, 0x00, 0x00, 0x00,
	0x49, 0x44, 0x33, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x54, 0x52,
	0x43, 0x4b, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x31, 
  };
const unsigned char eleven_wav[WAVETABLE_SIZE] = {
	0x80, 0x83, 0x88, 0x8c, 0x8d, 0x8e, 0x8e, 0x8e, 0x8e, 0x8d, 0x8d, 0x8c,
	0x8a, 0x89, 0x87, 0x85, 0x83, 0x81, 0x7f, 0x7d, 0x7b, 0x79, 0x77, 0x76,
	0x74, 0x73, 0x72, 0x71, 0x71, 0x71, 0x71, 0x72, 0x72, 0x73, 0x74, 0x76,
	0x77, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7d, 0x7d, 0x7c, 0x7b, 0x79, 0x76,
	0x72, 0x6e, 0x68, 0x62, 0x5b, 0x54, 0x4c, 0x44, 0x3b, 0x32, 0x2a, 0x21,
	0x1a, 0x13, 0x0c, 0x07, 0x03, 0x01, 0x00, 0x00, 0x03, 0x07, 0x0d, 0x14,
	0x1e, 0x29, 0x35, 0x42, 0x51, 0x60, 0x70, 0x80, 0x90, 0x9f, 0xaf, 0xbd,
	0xca, 0xd7, 0xe2, 0xeb, 0xf2, 0xf8, 0xfc, 0xff, 0xff, 0xfe, 0xfc, 0xf8,
	0xf3, 0xed, 0xe5, 0xde, 0xd5, 0xcd, 0xc4, 0xbb, 0xb3, 0xab, 0xa3, 0x9d,
	0x97, 0x91, 0x8d, 0x89, 0x86, 0x84, 0x83, 0x82, 0x82, 0x82, 0x83, 0x84,
	0x85, 0x86, 0x88, 0x89, 0x8b, 0x8c, 0x8d, 0x8d, 0x8e, 0x8e, 0x8e, 0x8e,
	0x8d, 0x8c, 0x8b, 0x89, 0x88, 0x86, 0x84, 0x82, 0x80, 0x7e, 0x7c, 0x7a,
	0x78, 0x76, 0x75, 0x73, 0x72, 0x72, 0x71, 0x71, 0x72, 0x74, 0x76, 0x79,
	0x7b, 0x7d, 0x7e, 0x7f, 0x4c, 0x49, 0x53, 0x54, 0x1c, 0x00, 0x00, 0x00,
	0x49, 0x4e, 0x46, 0x4f, 0x49, 0x4e, 0x41, 0x4d, 0x04, 0x00, 0x00, 0x00,
	0x31, 0x72, 0x00, 0x00, 0x49, 0x54, 0x52, 0x4b, 0x04, 0x00, 0x00, 0x00,
	0x31, 0x31, 0x00, 0x00, 0x69, 0x64, 0x33, 0x20, 0x24, 0x00, 0x00, 0x00,
	0x49, 0x44, 0x33, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x54, 0x52,
	0x43, 0x4b, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x31, 
  };
const unsigned char twelve_wav[WAVETABLE_SIZE] = {
	0x7f, 0x80, 0x89, 0x94, 0x8f, 0x7e, 0x6b, 0x61, 0x69, 0x80, 0x99, 0xa5,
	0x9c, 0x81, 0x65, 0x56, 0x60, 0x7b, 0x99, 0xa8, 0xa0, 0x86, 0x69, 0x5a,
	0x61, 0x78, 0x91, 0x9e, 0x99, 0x87, 0x74, 0x6b, 0x6f, 0x7b, 0x85, 0x88,
	0x84, 0x80, 0x80, 0x84, 0x88, 0x86, 0x7b, 0x6d, 0x67, 0x71, 0x88, 0xa0,
	0xa9, 0x99, 0x76, 0x52, 0x45, 0x59, 0x88, 0xb8, 0xcb, 0xb2, 0x79, 0x3e,
	0x25, 0x3f, 0x82, 0xc7, 0xe7, 0xcc, 0x83, 0x35, 0x0e, 0x28, 0x75, 0xcb,
	0xf9, 0xe2, 0x92, 0x36, 0x02, 0x14, 0x64, 0xc2, 0xfb, 0xef, 0xa4, 0x47,
	0x0b, 0x12, 0x56, 0xaf, 0xeb, 0xe8, 0xab, 0x59, 0x20, 0x1f, 0x53, 0x9d,
	0xd2, 0xd6, 0xaa, 0x6b, 0x3d, 0x37, 0x59, 0x8c, 0xb3, 0xb9, 0x9f, 0x79,
	0x5b, 0x56, 0x68, 0x82, 0x95, 0x98, 0x8d, 0x7f, 0x77, 0x78, 0x7d, 0x80,
	0x7e, 0x79, 0x77, 0x7e, 0x8a, 0x93, 0x92, 0x84, 0x70, 0x62, 0x65, 0x78,
	0x92, 0xa3, 0xa1, 0x8b, 0x6d, 0x58, 0x5a, 0x72, 0x91, 0xa6, 0xa5, 0x8f,
	0x71, 0x5d, 0x5d, 0x70, 0x8a, 0x9c, 0x9c, 0x8d, 0x79, 0x70, 0x73, 0x7b,
	0x81, 0x82, 0x80, 0x7f, 0x4c, 0x49, 0x53, 0x54, 0x1c, 0x00, 0x00, 0x00,
	0x49, 0x4e, 0x46, 0x4f, 0x49, 0x4e, 0x41, 0x4d, 0x04, 0x00, 0x00, 0x00,
	0x32, 0x30, 0x72, 0x00, 0x49, 0x54, 0x52, 0x4b, 0x04, 0x00, 0x00, 0x00,
	0x31, 0x32, 0x00, 0x00, 0x69, 0x64, 0x33, 0x20, 0x26, 0x00, 0x00, 0x00,
	0x49, 0x44, 0x33, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x54, 0x52,
	0x43, 0x4b, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x31, 0x32, 0x54,
	0x49, 0x54, 0x32, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 
  
  };
const unsigned char thirteen_wav[WAVETABLE_SIZE] = {
	0x74, 0xb2, 0x01, 0x80, 0x73, 0x91, 0xc4, 0x8a, 0x73, 0x95, 0x48, 0x93,
	0x4d, 0x9b, 0x3e, 0x9b, 0xc5, 0xa1, 0x0b, 0xa3, 0x77, 0xa8, 0xa4, 0xaa,
	0x27, 0xaf, 0xef, 0xb1, 0xba, 0xb5, 0xe9, 0xb8, 0x34, 0xbc, 0xbb, 0xbf,
	0xb9, 0xc2, 0x97, 0xc6, 0x7d, 0xc9, 0x9e, 0xcd, 0x86, 0xd0, 0xd3, 0xd4,
	0xc0, 0xd7, 0x18, 0xdc, 0xfb, 0xde, 0x34, 0xe3, 0x02, 0xe6, 0x04, 0xea,
	0xc1, 0xec, 0x9c, 0xf0, 0x58, 0xf3, 0x2a, 0xf7, 0x06, 0xfa, 0xe6, 0xfd,
	0xfd, 0x00, 0xfe, 0x04, 0x49, 0x08, 0x5b, 0x0c, 0xb5, 0x0f, 0xbb, 0x13,
	0xf8, 0x16, 0xc7, 0x1a, 0xd4, 0x1d, 0x58, 0x21, 0x47, 0x24, 0x92, 0x27,
	0x9e, 0x2a, 0xdc, 0x2d, 0x53, 0x31, 0xad, 0x34, 0xc2, 0x38, 0x3b, 0x3c,
	0xe6, 0x40, 0x39, 0x44, 0x2a, 0x49, 0xd0, 0x4b, 0x75, 0x50, 0xca, 0x51,
	0x80, 0x55, 0x01, 0x55, 0x4b, 0x57, 0xc5, 0x54, 0x78, 0x55, 0x1f, 0x51,
	0x67, 0x50, 0xda, 0x4a, 0x17, 0x49, 0x28, 0x43, 0xb9, 0x40, 0x5b, 0x3b,
	0x4c, 0x38, 0x51, 0x34, 0x39, 0x30, 0x79, 0x2e, 0x37, 0x28, 0x3d, 0x2a,
	0x7f, 0x1e, 0xaa, 0x2a, 0xab, 0xcd, 0x4c, 0x49, 0x53, 0x54, 0x1c, 0x00,
	0x00, 0x00, 0x49, 0x4e, 0x46, 0x4f, 0x49, 0x4e, 0x41, 0x4d, 0x04, 0x00,
	0x00, 0x00, 0x32, 0x34, 0x72, 0x00, 0x49, 0x54, 0x52, 0x4b, 0x04, 0x00,
	0x00, 0x00, 0x33, 0x34, 0x00, 0x00, 0x69, 0x64, 0x33, 0x20, 0x26, 0x00,
	0x00, 0x00, 0x49, 0x44, 0x33, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b,
	0x54, 0x52, 0x43, 0x4b, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x33,
	0x34, 0x54, 0x49, 0x54, 0x32, 0x00, 0x00, 0x00, 0x04, 0x00,
  };
const unsigned char fourteen_wav[WAVETABLE_SIZE] = {
	0x29, 0xf1, 0xae, 0xe9, 0x3c, 0xf2, 0xb1, 0xf8, 0xb0, 0xfd, 0x46, 0x02,
	0x08, 0x06, 0xd6, 0x0f, 0x0e, 0x11, 0x6a, 0x16, 0xa0, 0x1c, 0x22, 0x26,
	0x08, 0x26, 0x7d, 0x32, 0x5a, 0xcd, 0xf1, 0x8c, 0xde, 0x12, 0xd3, 0x27,
	0xb0, 0x4b, 0x15, 0x03, 0x2e, 0x92, 0x3f, 0x87, 0xf9, 0xc1, 0x1e, 0x30,
	0x62, 0x4b, 0x42, 0x21, 0xcb, 0x9b, 0x70, 0x8c, 0x1d, 0x8b, 0x25, 0xae,
	0x99, 0x41, 0xb2, 0x40, 0xa9, 0x4d, 0x32, 0x1a, 0xf5, 0xb3, 0xc2, 0x8e,
	0x5f, 0xbc, 0x43, 0x41, 0xed, 0x43, 0x57, 0x28, 0xbd, 0xc3, 0xf9, 0xae,
	0x07, 0xa1, 0x39, 0xdf, 0x27, 0x16, 0x44, 0xc6, 0x3c, 0xc6, 0x6d, 0xbc,
	0xf2, 0xc8, 0x53, 0xc5, 0x76, 0xce, 0xbf, 0xd3, 0x1b, 0xde, 0x7d, 0xe2,
	0x8f, 0xea, 0x76, 0xec, 0x7d, 0xf2, 0xfc, 0xfa, 0xa8, 0x00, 0x7b, 0x07,
	0x80, 0x0c, 0x35, 0x11, 0x2a, 0x15, 0xf1, 0x1d, 0x94, 0x20, 0xfa, 0x25,
	0x9a, 0x2a, 0xf0, 0x2d, 0x44, 0x31, 0xc4, 0x36, 0x68, 0x39, 0xc5, 0x3d,
	0x0d, 0x3e, 0xdf, 0x40, 0x49, 0x41, 0xc8, 0x44, 0x84, 0x43, 0x88, 0x47,
	0xfb, 0x42, 0x16, 0x4b, 0x31, 0x17, 0x4c, 0x49, 0x53, 0x54, 0x1c, 0x00,
	0x00, 0x00, 0x49, 0x4e, 0x46, 0x4f, 0x49, 0x4e, 0x41, 0x4d, 0x04, 0x00,
	0x00, 0x00, 0x32, 0x34, 0x72, 0x00, 0x49, 0x54, 0x52, 0x4b, 0x04, 0x00,
	0x00, 0x00, 0x33, 0x35, 0x00, 0x00, 0x69, 0x64, 0x33, 0x20, 0x26, 0x00,
	0x00, 0x00, 0x49, 0x44, 0x33, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b,
	0x54, 0x52, 0x43, 0x4b, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x33,
	0x35, 0x54, 0x49, 0x54, 0x32, 0x00, 0x00, 0x00, 0x04, 0x00,
  };
const unsigned char fifteen_wav[WAVETABLE_SIZE] = {  
	0xa3, 0x49, 0xd2, 0x3e, 0x81, 0xf3, 0xe7, 0xfa, 0x1c, 0xfa, 0xaa, 0x06,
	0xd5, 0xf8, 0xd5, 0xfa, 0xd4, 0xfd, 0x25, 0x02, 0xf9, 0xf9, 0x5e, 0xfb,
	0x42, 0xff, 0xa6, 0xff, 0xc3, 0xfa, 0xd5, 0xfb, 0xe2, 0xff, 0x10, 0xfe,
	0x4e, 0xfb, 0x62, 0xfc, 0xfb, 0xff, 0x14, 0xfd, 0xb0, 0xfb, 0xf2, 0xfc,
	0xc7, 0xff, 0x73, 0xfc, 0x01, 0xfc, 0x80, 0xfd, 0x5a, 0xff, 0x1e, 0xfc,
	0x44, 0xfc, 0xfd, 0xfd, 0xd5, 0xfe, 0xef, 0xfb, 0x90, 0xfc, 0x57, 0xfe,
	0x4e, 0xfe, 0xda, 0xfb, 0xe8, 0xfc, 0x87, 0xfe, 0xd5, 0xfd, 0xd2, 0xfb,
	0x4b, 0xfd, 0x91, 0xfe, 0x66, 0xfd, 0xe7, 0xfb, 0xa2, 0xfd, 0x8e, 0xfe,
	0xeb, 0xfc, 0x2a, 0xfc, 0xd7, 0xfd, 0x8a, 0xfe, 0x6a, 0xfc, 0x96, 0xfc,
	0xe7, 0xfd, 0x8b, 0xfe, 0xdf, 0xfb, 0x2c, 0xfd, 0xc9, 0xfd, 0x93, 0xfe,
	0x5d, 0xfb, 0xd1, 0xfd, 0xa4, 0xfd, 0x7b, 0xfe, 0x0c, 0xfb, 0x5b, 0xfe,
	0x92, 0xfd, 0x24, 0xfe, 0x1b, 0xfb, 0x95, 0xfe, 0xca, 0xfd, 0x5c, 0xfd,
	0xc9, 0xfb, 0x27, 0xfe, 0xbd, 0xfe, 0x88, 0xfb, 0xfc, 0xfd, 0xac, 0xfb,
	0xd5, 0x02, 0x6c, 0xf3, 0x96, 0x3f, 0x4c, 0x49, 0x53, 0x54, 0x1c, 0x00,
	0x00, 0x00, 0x49, 0x4e, 0x46, 0x4f, 0x49, 0x4e, 0x41, 0x4d, 0x04, 0x00,
	0x00, 0x00, 0x32, 0x34, 0x72, 0x00, 0x49, 0x54, 0x52, 0x4b, 0x04, 0x00,
	0x00, 0x00, 0x33, 0x36, 0x00, 0x00, 0x69, 0x64, 0x33, 0x20, 0x26, 0x00,
	0x00, 0x00, 0x49, 0x44, 0x33, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b,
	0x54, 0x52, 0x43, 0x4b, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x33,
	0x36, 0x54, 0x49, 0x54, 0x32, 0x00, 0x00, 0x00, 0x04, 0x00
  };
const unsigned char sixteen_wav[WAVETABLE_SIZE] = {
	0x06, 0xb5, 0x35, 0x89, 0x94, 0xaa, 0xad, 0xb3, 0x31, 0xeb, 0x1e, 0x01,
	0xd5, 0xee, 0xaa, 0xe9, 0x46, 0x17, 0xcb, 0x0b, 0x36, 0x0a, 0xb4, 0x06,
	0x70, 0xfb, 0x60, 0x16, 0xbd, 0x1d, 0xb3, 0x39, 0x5c, 0x40, 0xc7, 0x3c,
	0x75, 0x38, 0xbe, 0x36, 0x33, 0x46, 0xfd, 0x2f, 0xe1, 0x35, 0x1c, 0x4c,
	0x6f, 0x46, 0xb1, 0x4a, 0xdb, 0x46, 0x98, 0x49, 0x46, 0x47, 0x3e, 0x42,
	0x49, 0x41, 0x0a, 0x3e, 0x0f, 0x39, 0x7a, 0x2c, 0x29, 0x2c, 0xaa, 0x28,
	0xc1, 0x2c, 0xf2, 0x2a, 0x6b, 0x1a, 0x0d, 0x16, 0x0f, 0x0f, 0x68, 0x0c,
	0x47, 0x0e, 0xfe, 0x09, 0x22, 0x02, 0x8e, 0x02, 0x64, 0xf9, 0x4a, 0xf4,
	0xe4, 0xeb, 0xa1, 0xe9, 0xea, 0xe7, 0xaf, 0xe3, 0x9d, 0xe3, 0x2c, 0xe1,
	0x86, 0xdf, 0x9e, 0xdd, 0x92, 0xde, 0xcb, 0xdb, 0x67, 0xdd, 0x2c, 0xdb,
	0x83, 0xdd, 0x37, 0xdb, 0xc7, 0xdc, 0x30, 0xdb, 0xa6, 0xdd, 0xfe, 0xdb,
	0x4a, 0xde, 0xb2, 0xdc, 0x36, 0xe0, 0x10, 0xdf, 0x27, 0xe0, 0x61, 0xdf,
	0x38, 0xe0, 0xd1, 0xdf, 0xc7, 0xdf, 0x88, 0xe0, 0xf4, 0xdd, 0x93, 0xe0,
	0x54, 0xdb, 0x86, 0xe2, 0x9f, 0xab, 0x4c, 0x49, 0x53, 0x54, 0x1c, 0x00,
	0x00, 0x00, 0x49, 0x4e, 0x46, 0x4f, 0x49, 0x4e, 0x41, 0x4d, 0x04, 0x00,
	0x00, 0x00, 0x32, 0x34, 0x72, 0x00, 0x49, 0x54, 0x52, 0x4b, 0x04, 0x00,
	0x00, 0x00, 0x33, 0x37, 0x00, 0x00, 0x69, 0x64, 0x33, 0x20, 0x26, 0x00,
	0x00, 0x00, 0x49, 0x44, 0x33, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b,
	0x54, 0x52, 0x43, 0x4b, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x33,
	0x37, 0x54, 0x49, 0x54, 0x32, 0x00, 0x00, 0x00, 0x04, 0x00,
  };
  const unsigned char seventeen_wav[WAVETABLE_SIZE] = {
	0xe6, 0xff, 0xbd, 0xff, 0xde, 0x05, 0xe9, 0x0b, 0x4e, 0x0c, 0x93, 0x09,
	0x15, 0x03, 0xf5, 0xfa, 0x15, 0xf4, 0x05, 0xf2, 0x97, 0xf4, 0xbb, 0xfa,
	0x13, 0x03, 0x99, 0x0b, 0x54, 0x10, 0xda, 0x0e, 0x5b, 0x08, 0xc2, 0xfe,
	0x00, 0xf4, 0x54, 0xeb, 0x8c, 0xe9, 0x08, 0xf0, 0x07, 0xfc, 0xf4, 0x09,
	0xf9, 0x16, 0x2f, 0x1e, 0x1a, 0x1b, 0x20, 0x0e, 0x45, 0xfc, 0x59, 0xe9,
	0x0d, 0xd9, 0xf4, 0xd1, 0x39, 0xda, 0x56, 0xf0, 0x09, 0x0e, 0x6d, 0x2d,
	0x96, 0x46, 0xf5, 0x4b, 0x60, 0x35, 0x7c, 0x0a, 0xb3, 0xd9, 0xab, 0xab,
	0x66, 0x8b, 0x0c, 0x91, 0x52, 0xcc, 0xa6, 0x25, 0x2c, 0x69, 0x78, 0x77,
	0xcd, 0x5a, 0x29, 0x2d, 0x43, 0xfc, 0xc6, 0xcf, 0x0e, 0xb5, 0x39, 0xb6,
	0x83, 0xcd, 0xfd, 0xec, 0x5e, 0x0b, 0xff, 0x22, 0xc5, 0x2d, 0xb1, 0x28,
	0x29, 0x19, 0x21, 0x06, 0x06, 0xf4, 0xe8, 0xe5, 0x33, 0xe1, 0xe7, 0xe6,
	0xb0, 0xf3, 0x91, 0x01, 0x37, 0x0e, 0x91, 0x15, 0x59, 0x15, 0x3b, 0x0d,
	0x98, 0x02, 0x7f, 0xf8, 0x9a, 0xf1, 0x16, 0xef, 0x05, 0xf3, 0x2d, 0xfb,
	0xc8, 0x03, 0x7b, 0x0a, 0x4c, 0x49, 0x53, 0x54, 0x1c, 0x00, 0x00, 0x00,
	0x49, 0x4e, 0x46, 0x4f, 0x49, 0x4e, 0x41, 0x4d, 0x04, 0x00, 0x00, 0x00,
	0x32, 0x34, 0x72, 0x00, 0x49, 0x54, 0x52, 0x4b, 0x04, 0x00, 0x00, 0x00,
	0x32, 0x36, 0x00, 0x00, 0x69, 0x64, 0x33, 0x20, 0x26, 0x00, 0x00, 0x00,
	0x49, 0x44, 0x33, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x54, 0x52,
	0x43, 0x4b, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x32, 0x36, 0x54,
	0x49, 0x54, 0x32, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 
	};
  
  
  const unsigned char eighteen_wav[WAVETABLE_SIZE] = {  
	0xe9, 0xff, 0x4b, 0xff, 0x41, 0x01, 0x08, 0x05, 0xe0, 0x05, 0x94, 0x03,
	0xd5, 0xff, 0xde, 0xfc, 0x11, 0xfb, 0xb5, 0xfa, 0xce, 0xfc, 0xe8, 0x00,
	0x87, 0x04, 0x56, 0x05, 0x39, 0x03, 0xfb, 0xfe, 0x17, 0xfa, 0x12, 0xf7,
	0xbf, 0xf8, 0x40, 0xff, 0xfb, 0x07, 0x69, 0x0f, 0xd5, 0x11, 0x25, 0x0b,
	0xa8, 0xfa, 0x6b, 0xe6, 0x5a, 0xd9, 0xd9, 0xdb, 0x16, 0xf0, 0xa2, 0x11,
	0xcb, 0x35, 0xda, 0x4b, 0xb0, 0x43, 0x2b, 0x18, 0x6a, 0xd6, 0x64, 0x9b,
	0xa4, 0x87, 0x2b, 0xac, 0x48, 0xfb, 0xed, 0x4c, 0x33, 0x77, 0xe4, 0x68,
	0x31, 0x30, 0x36, 0xed, 0x45, 0xbe, 0x77, 0xb2, 0x5e, 0xc6, 0x46, 0xea,
	0xf0, 0x0c, 0xd7, 0x22, 0x18, 0x27, 0x35, 0x1b, 0x09, 0x07, 0x98, 0xf5,
	0xc6, 0xed, 0x85, 0xef, 0xbb, 0xf6, 0x8c, 0xff, 0x78, 0x06, 0xb4, 0x08,
	0x10, 0x06, 0x22, 0x01, 0xbf, 0xfc, 0x5c, 0xfa, 0xde, 0xfa, 0x3c, 0xfe,
	0x77, 0x02, 0xd7, 0x04, 0xb4, 0x04, 0xf0, 0x02, 0x1f, 0x00, 0x71, 0xfc,
	0xd7, 0xf9, 0x61, 0xfa, 0xcd, 0xfd, 0x80, 0x01, 0x3e, 0x04, 0x2d, 0x05,
	0x67, 0x04, 0xc4, 0x00, 0xa2, 0xfe, 0x4c, 0x49, 0x53, 0x54, 0x1c, 0x00,
	0x00, 0x00, 0x49, 0x4e, 0x46, 0x4f, 0x49, 0x4e, 0x41, 0x4d, 0x04, 0x00,
	0x00, 0x00, 0x32, 0x34, 0x72, 0x00, 0x49, 0x54, 0x52, 0x4b, 0x04, 0x00,
	0x00, 0x00, 0x32, 0x37, 0x00, 0x00, 0x69, 0x64, 0x33, 0x20, 0x26, 0x00,
	0x00, 0x00, 0x49, 0x44, 0x33, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b,
	0x54, 0x52, 0x43, 0x4b, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x32,
	0x37, 0x54, 0x49, 0x54, 0x32, 0x00, 0x00, 0x00, 0x04, 0x00, 
	};
  
  
  const unsigned char nineteen_wav[WAVETABLE_SIZE] = {
	0x75, 0x00, 0xa9, 0xfb, 0x66, 0xf7, 0xf1, 0xfd, 0x14, 0x05, 0xb0, 0x09,
	0xc2, 0x07, 0xc7, 0xfe, 0xd3, 0xf4, 0x9a, 0xf4, 0x20, 0xff, 0x4e, 0x09,
	0x54, 0x0a, 0x06, 0x04, 0x32, 0xfc, 0xe1, 0xf5, 0xa1, 0xf5, 0x11, 0xff,
	0x6b, 0x0c, 0x3e, 0x10, 0xc5, 0x05, 0x5b, 0xf6, 0xa4, 0xee, 0xb0, 0xf3,
	0x3a, 0x03, 0x25, 0x13, 0x07, 0x15, 0x32, 0x03, 0xa4, 0xeb, 0x89, 0xe3,
	0xb3, 0xf1, 0x68, 0x0b, 0x88, 0x21, 0x70, 0x26, 0x94, 0x10, 0x8c, 0xe6,
	0xb9, 0xc6, 0xcb, 0xd1, 0xa8, 0x08, 0x85, 0x44, 0x54, 0x53, 0x3d, 0x1f,
	0x67, 0xc5, 0xb5, 0x89, 0x47, 0xa3, 0xab, 0x05, 0xe9, 0x63, 0x94, 0x74,
	0xa1, 0x32, 0x5d, 0xd9, 0x24, 0xab, 0x21, 0xc0, 0x28, 0xfe, 0x46, 0x32,
	0x8d, 0x38, 0xca, 0x15, 0x59, 0xec, 0x18, 0xd9, 0x7e, 0xe0, 0xc2, 0xf7,
	0x08, 0x11, 0x3c, 0x1d, 0x0b, 0x13, 0x02, 0xfb, 0x9b, 0xea, 0x5d, 0xee,
	0xf9, 0xfe, 0xe7, 0x0d, 0x9e, 0x11, 0xd7, 0x08, 0x3e, 0xf9, 0xf5, 0xef,
	0xfb, 0xf4, 0xbd, 0x02, 0x43, 0x0b, 0x4d, 0x0a, 0x61, 0x03, 0xd1, 0xfb,
	0xb5, 0xf5, 0x35, 0xf8, 0x6c, 0x00, 0x4c, 0x49, 0x53, 0x54, 0x1c, 0x00,
	0x00, 0x00, 0x49, 0x4e, 0x46, 0x4f, 0x49, 0x4e, 0x41, 0x4d, 0x04, 0x00,
	0x00, 0x00, 0x32, 0x34, 0x72, 0x00, 0x49, 0x54, 0x52, 0x4b, 0x04, 0x00,
	0x00, 0x00, 0x32, 0x38, 0x00, 0x00, 0x69, 0x64, 0x33, 0x20, 0x26, 0x00,
	0x00, 0x00, 0x49, 0x44, 0x33, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b,
	0x54, 0x52, 0x43, 0x4b, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x32,
	0x38, 0x54, 0x49, 0x54, 0x32, 0x00, 0x00, 0x00, 0x04, 0x00, 
	};
  
  const unsigned char twenty_wav[WAVETABLE_SIZE] = {
	0x0d, 0xb3, 0x2a, 0x9d, 0x42, 0xd2, 0x09, 0xd3, 0x99, 0xe8, 0x4b, 0xed,
	0xa8, 0xfc, 0x36, 0x01, 0xcf, 0x0b, 0x06, 0x0f, 0x6b, 0x15, 0xf1, 0x16,
	0xaf, 0x19, 0x88, 0x19, 0x44, 0x19, 0xb5, 0x17, 0x39, 0x15, 0xb3, 0x12,
	0xcf, 0x0e, 0xe1, 0x0b, 0x61, 0x07, 0x94, 0x04, 0x36, 0x00, 0xfa, 0xfd,
	0x5f, 0xfa, 0x06, 0xf9, 0x8b, 0xf6, 0x49, 0xf6, 0x17, 0xf5, 0xf5, 0xf5,
	0x01, 0xf6, 0xd7, 0xf7, 0xeb, 0xf8, 0x6e, 0xfb, 0x36, 0xfd, 0x07, 0x00,
	0x15, 0x02, 0xd8, 0x04, 0xbe, 0x06, 0x11, 0x09, 0x77, 0x0a, 0x12, 0x0c,
	0xb7, 0x0c, 0x6b, 0x0d, 0x36, 0x0d, 0xfe, 0x0c, 0xf5, 0x0b, 0xe0, 0x0a,
	0x3e, 0x09, 0x79, 0x07, 0x94, 0x05, 0x5d, 0x03, 0x93, 0x01, 0x35, 0xff,
	0xed, 0xfd, 0xaa, 0xfb, 0x38, 0xfb, 0x4c, 0xf9, 0xe7, 0xf9, 0x78, 0xf8,
	0x39, 0xfa, 0x45, 0xf9, 0x1d, 0xfc, 0x9b, 0xfb, 0x47, 0xff, 0x1b, 0xff,
	0x34, 0x03, 0x34, 0x03, 0x3a, 0x07, 0x48, 0x07, 0xa2, 0x0a, 0xb7, 0x0a,
	0xbf, 0x0c, 0x0b, 0x0d, 0x00, 0x0d, 0x16, 0x0e, 0xe7, 0x0a, 0x4c, 0x0e,
	0x47, 0x05, 0xff, 0x10, 0xc5, 0xc1, 0x4c, 0x49, 0x53, 0x54, 0x1c, 0x00,
	0x00, 0x00, 0x49, 0x4e, 0x46, 0x4f, 0x49, 0x4e, 0x41, 0x4d, 0x04, 0x00,
	0x00, 0x00, 0x32, 0x34, 0x72, 0x00, 0x49, 0x54, 0x52, 0x4b, 0x04, 0x00,
	0x00, 0x00, 0x32, 0x39, 0x00, 0x00, 0x69, 0x64, 0x33, 0x20, 0x26, 0x00,
	0x00, 0x00, 0x49, 0x44, 0x33, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b,
	0x54, 0x52, 0x43, 0x4b, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x32,
	0x39, 0x54, 0x49, 0x54, 0x32, 0x00, 0x00, 0x00, 0x04, 0x00, 
	};
  
  const unsigned char twentyOne_wav[WAVETABLE_SIZE] = {
	0x0c, 0xb2, 0x00, 0x80, 0xa3, 0xa6, 0x84, 0xb5, 0xee, 0xd2, 0xdf, 0xe1,
	0x98, 0xf7, 0x9d, 0x02, 0x68, 0x10, 0x06, 0x16, 0x36, 0x1c, 0x95, 0x1c,
	0x8a, 0x1c, 0x08, 0x19, 0xf2, 0x14, 0x9c, 0x0f, 0xf0, 0x09, 0xe5, 0x04,
	0xd6, 0xff, 0xba, 0xfc, 0xb5, 0xf9, 0x4d, 0xf9, 0xd9, 0xf8, 0xf7, 0xfa,
	0xa1, 0xfc, 0x5b, 0x00, 0x12, 0x03, 0x1d, 0x07, 0x9d, 0x09, 0xc0, 0x0c,
	0x01, 0x0e, 0x6e, 0x0f, 0xf9, 0x0e, 0x8b, 0x0e, 0x89, 0x0c, 0xb7, 0x0a,
	0xd9, 0x07, 0x90, 0x05, 0xc0, 0x02, 0xf9, 0x00, 0x17, 0xff, 0x86, 0xfe,
	0x11, 0xfe, 0xf0, 0xfe, 0xe7, 0xff, 0xe1, 0x01, 0xcc, 0x03, 0x30, 0x06,
	0x47, 0x08, 0x39, 0x0a, 0xbc, 0x0b, 0x80, 0x0c, 0x04, 0x0d, 0x40, 0x0c,
	0xbd, 0x0b, 0x93, 0x09, 0x78, 0x08, 0x72, 0x05, 0x82, 0x04, 0x57, 0x01,
	0x53, 0x01, 0xb8, 0xfe, 0x1c, 0x00, 0x80, 0xfe, 0x55, 0x01, 0xbb, 0x00,
	0x94, 0x04, 0x99, 0x04, 0xa4, 0x08, 0xc0, 0x08, 0xf7, 0x0b, 0xbf, 0x0b,
	0x31, 0x0d, 0xa0, 0x0c, 0x93, 0x0b, 0x5b, 0x0b, 0x15, 0x07, 0x34, 0x09,
	0xb0, 0xff, 0xa2, 0x0a, 0xd1, 0xbe, 0x4c, 0x49, 0x53, 0x54, 0x1c, 0x00,
	0x00, 0x00, 0x49, 0x4e, 0x46, 0x4f, 0x49, 0x4e, 0x41, 0x4d, 0x04, 0x00,
	0x00, 0x00, 0x32, 0x34, 0x72, 0x00, 0x49, 0x54, 0x52, 0x4b, 0x04, 0x00,
	0x00, 0x00, 0x33, 0x30, 0x00, 0x00, 0x69, 0x64, 0x33, 0x20, 0x26, 0x00,
	0x00, 0x00, 0x49, 0x44, 0x33, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b,
	0x54, 0x52, 0x43, 0x4b, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x33,
	0x30, 0x54, 0x49, 0x54, 0x32, 0x00, 0x00, 0x00, 0x04, 0x00,
	};
  
  const unsigned char twentyTwo_wav[WAVETABLE_SIZE] = { 
	0xc8, 0xd5, 0x67, 0xe7, 0xf4, 0x15, 0xf4, 0x0c, 0x24, 0x15, 0x69, 0x11,
	0x6b, 0x16, 0x69, 0x14, 0xa9, 0x17, 0x78, 0x16, 0x60, 0x18, 0x9a, 0x17,
	0x61, 0x18, 0xcb, 0x17, 0xa0, 0x17, 0x12, 0x17, 0x23, 0x16, 0x87, 0x15,
	0x03, 0x14, 0x53, 0x13, 0x6c, 0x11, 0xad, 0x10, 0x94, 0x0e, 0xd1, 0x0d,
	0xbf, 0x0b, 0x02, 0x0b, 0x2b, 0x09, 0x8d, 0x08, 0x13, 0x07, 0xb1, 0x06,
	0xae, 0x05, 0xa1, 0x05, 0x2b, 0x05, 0x7d, 0x05, 0xa4, 0x05, 0x59, 0x06,
	0x19, 0x07, 0x35, 0x08, 0x78, 0x09, 0xf6, 0x0a, 0x9f, 0x0c, 0x68, 0x0e,
	0x55, 0x10, 0x47, 0x12, 0x49, 0x14, 0x3f, 0x16, 0x22, 0x18, 0xf0, 0x19,
	0x7f, 0x1b, 0xf1, 0x1c, 0xfa, 0x1d, 0xe0, 0x1e, 0x2f, 0x1f, 0x56, 0x1f,
	0xcd, 0x1e, 0xfe, 0x1d, 0x8d, 0x1c, 0x9d, 0x1a, 0x2e, 0x18, 0x0f, 0x15,
	0x9d, 0x11, 0x3f, 0x0d, 0xd6, 0x08, 0x3c, 0x03, 0xf7, 0xfd, 0x31, 0xf7,
	0x34, 0xf1, 0x60, 0xe9, 0xd9, 0xe2, 0x2b, 0xda, 0x4a, 0xd3, 0x02, 0xca,
	0xfb, 0xc2, 0x5c, 0xb9, 0x6d, 0xb2, 0xbb, 0xa8, 0x27, 0xa2, 0x93, 0x98,
	0xce, 0x92, 0xc5, 0x88, 0x8a, 0x9c, 0x4c, 0x49, 0x53, 0x54, 0x1c, 0x00,
	0x00, 0x00, 0x49, 0x4e, 0x46, 0x4f, 0x49, 0x4e, 0x41, 0x4d, 0x04, 0x00,
	0x00, 0x00, 0x32, 0x34, 0x72, 0x00, 0x49, 0x54, 0x52, 0x4b, 0x04, 0x00,
	0x00, 0x00, 0x33, 0x31, 0x00, 0x00, 0x69, 0x64, 0x33, 0x20, 0x26, 0x00,
	0x00, 0x00, 0x49, 0x44, 0x33, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b,
	0x54, 0x52, 0x43, 0x4b, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x33,
	0x31, 0x54, 0x49, 0x54, 0x32, 0x00, 0x00, 0x00, 0x04, 0x00, 
	};
	
  const unsigned char twentyThree_wav[WAVETABLE_SIZE] = {
	0x84, 0xb2, 0x00, 0x80, 0x73, 0x93, 0x3e, 0x90, 0xb6, 0x9f, 0x62, 0xa3,
	0x1c, 0xb2, 0x4f, 0xb9, 0x94, 0xc7, 0x9d, 0xd0, 0xd3, 0xdd, 0xc2, 0xe7,
	0x1d, 0xf3, 0x6d, 0xfc, 0x17, 0x06, 0x8d, 0x0e, 0x36, 0x16, 0x6c, 0x1d,
	0x27, 0x23, 0x07, 0x29, 0x6b, 0x2c, 0xaa, 0x30, 0xb6, 0x32, 0x70, 0x35,
	0x38, 0x36, 0xc4, 0x37, 0x85, 0x37, 0x23, 0x38, 0x29, 0x37, 0xfb, 0x36,
	0x8d, 0x35, 0xd7, 0x34, 0x13, 0x33, 0xf3, 0x31, 0x01, 0x30, 0xa5, 0x2e,
	0x9d, 0x2c, 0x20, 0x2b, 0x0f, 0x29, 0x7f, 0x27, 0x82, 0x25, 0xed, 0x23,
	0xfa, 0x21, 0x70, 0x20, 0x7e, 0x1e, 0x0f, 0x1d, 0x26, 0x1b, 0xba, 0x19,
	0x03, 0x18, 0x91, 0x16, 0xf1, 0x14, 0x6c, 0x13, 0x01, 0x12, 0x52, 0x10,
	0x05, 0x0f, 0x24, 0x0d, 0x19, 0x0c, 0xe4, 0x09, 0xfb, 0x08, 0x64, 0x06,
	0x92, 0x05, 0x7a, 0x02, 0xba, 0x01, 0x1d, 0xfe, 0x41, 0xfd, 0x08, 0xf9,
	0xf7, 0xf7, 0x1e, 0xf3, 0x9d, 0xf1, 0x2e, 0xec, 0x02, 0xea, 0x23, 0xe4,
	0xf2, 0xe0, 0xd2, 0xda, 0x5b, 0xd6, 0x36, 0xd0, 0x1d, 0xca, 0xb2, 0xc5,
	0x7a, 0xbb, 0xb3, 0xba, 0xdc, 0x96, 0x4c, 0x49, 0x53, 0x54, 0x1c, 0x00,
	0x00, 0x00, 0x49, 0x4e, 0x46, 0x4f, 0x49, 0x4e, 0x41, 0x4d, 0x04, 0x00,
	0x00, 0x00, 0x32, 0x34, 0x72, 0x00, 0x49, 0x54, 0x52, 0x4b, 0x04, 0x00,
	0x00, 0x00, 0x33, 0x33, 0x00, 0x00, 0x69, 0x64, 0x33, 0x20, 0x26, 0x00,
	0x00, 0x00, 0x49, 0x44, 0x33, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b,
	0x54, 0x52, 0x43, 0x4b, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x33,
	0x33, 0x54, 0x49, 0x54, 0x32, 0x00, 0x00, 0x00, 0x04, 0x00,
	};
  
  const unsigned char twentyFour_wav[WAVETABLE_SIZE] = {
	0x6a, 0xb2, 0x01, 0x80, 0x45, 0x92, 0xec, 0x8c, 0x82, 0x98, 0x5d, 0x97,
	0x58, 0xa0, 0x14, 0xa1, 0x73, 0xa8, 0x78, 0xaa, 0xb1, 0xb0, 0x9e, 0xb3,
	0xe9, 0xb8, 0x79, 0xbc, 0x28, 0xc1, 0x1b, 0xc5, 0x39, 0xc9, 0x90, 0xcd,
	0x4e, 0xd1, 0xc0, 0xd5, 0x26, 0xd9, 0xac, 0xdd, 0xc6, 0xe0, 0x45, 0xe5,
	0x5c, 0xe8, 0xbb, 0xec, 0x9e, 0xef, 0xcc, 0xf3, 0xaa, 0xf6, 0xa2, 0xfa,
	0x42, 0xfd, 0x18, 0x01, 0xbe, 0x03, 0x4a, 0x07, 0xd0, 0x09, 0x1e, 0x0d,
	0x84, 0x0f, 0x99, 0x12, 0xcd, 0x14, 0xb0, 0x17, 0xd0, 0x19, 0x6d, 0x1c,
	0x5e, 0x1e, 0xcf, 0x20, 0x8a, 0x22, 0xc9, 0x24, 0x59, 0x26, 0x3f, 0x28,
	0xad, 0x29, 0x50, 0x2b, 0xb2, 0x2c, 0xdd, 0x2d, 0x45, 0x2f, 0x05, 0x30,
	0x64, 0x31, 0xaf, 0x31, 0x20, 0x33, 0xaa, 0x32, 0xd3, 0x34, 0x29, 0x33,
	0xe3, 0x34, 0x07, 0x33, 0x10, 0x35, 0xeb, 0x32, 0x0f, 0x35, 0xdd, 0x32,
	0x1a, 0x35, 0xee, 0x31, 0x7b, 0x33, 0xe8, 0x30, 0x87, 0x31, 0x6a, 0x2f,
	0xfb, 0x2e, 0xad, 0x2d, 0xae, 0x2b, 0x01, 0x2c, 0x33, 0x27, 0xfb, 0x2a,
	0x51, 0x20, 0x4d, 0x2e, 0xc3, 0xcf, 0x4c, 0x49, 0x53, 0x54, 0x1c, 0x00,
	0x00, 0x00, 0x49, 0x4e, 0x46, 0x4f, 0x49, 0x4e, 0x41, 0x4d, 0x04, 0x00,
	0x00, 0x00, 0x32, 0x34, 0x72, 0x00, 0x49, 0x54, 0x52, 0x4b, 0x04, 0x00,
	0x00, 0x00, 0x33, 0x32, 0x00, 0x00, 0x69, 0x64, 0x33, 0x20, 0x26, 0x00,
	0x00, 0x00, 0x49, 0x44, 0x33, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b,
	0x54, 0x52, 0x43, 0x4b, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x33,
	0x32, 0x54, 0x49, 0x54, 0x32, 0x00, 0x00, 0x00, 0x04, 0x00,
	};

const unsigned char msgOne_wav[WAVETABLE_SIZE_GRANULAR] = {
  0x8a, 0x90, 0x87, 0x87, 0x8c, 0x8d, 0x8d, 0x87, 0x7a, 0x71, 0x6b, 0x69,
  0x6f, 0x71, 0x6e, 0x6a, 0x60, 0x58, 0x55, 0x51, 0x5c, 0x78, 0x96, 0xbc,
  0xd3, 0xd2, 0xc3, 0xa0, 0x79, 0x61, 0x53, 0x59, 0x70, 0x83, 0x95, 0x9b,
  0x92, 0x89, 0x80, 0x7c, 0x84, 0x8d, 0x92, 0x92, 0x86, 0x77, 0x6d, 0x67,
  0x6a, 0x71, 0x72, 0x72, 0x6b, 0x5e, 0x56, 0x4e, 0x4e, 0x69, 0x8c, 0xb4,
  0xd7, 0xd9, 0xc8, 0xa5, 0x75, 0x58, 0x4f, 0x56, 0x75, 0x8f, 0x9d, 0xa3,
  0x93, 0x80, 0x75, 0x70, 0x7c, 0x8e, 0x98, 0x9c, 0x90, 0x7b, 0x6b, 0x62,
  0x64, 0x70, 0x77, 0x7a, 0x75, 0x66, 0x58, 0x4b, 0x44, 0x5b, 0x84, 0xb2,
  0xdd, 0xe3, 0xcd, 0xa5, 0x6f, 0x4d, 0x47, 0x53, 0x77, 0x98, 0xa4, 0xa6,
  0x92, 0x79, 0x6e, 0x6e, 0x7d, 0x94, 0x9e, 0x9d, 0x8e, 0x76, 0x65, 0x5e,
  0x65, 0x76, 0x82, 0x83, 0x7a, 0x66, 0x53, 0x46, 0x3e, 0x54, 0x83, 0xb2,
  0xe0, 0xe8, 0xcc, 0xa0, 0x69, 0x46, 0x46, 0x58, 0x7d, 0xa0, 0xa8, 0xa1,
  0x8b, 0x72, 0x6d, 0x76, 0x87, 0x9c, 0x9e, 0x92, 0x7e, 0x68, 0x5f, 0x66,
  0x76, 0x89, 0x8f, 0x85, 0x72, 0x5b, 0x48, 0x42, 0x43, 0x5c, 0x90, 0xba,
  0xdf, 0xe1, 0xbd, 0x93, 0x65, 0x4a, 0x52, 0x67, 0x83, 0x9d, 0x9a, 0x8f,
  0x81, 0x75, 0x7c, 0x8d, 0x97, 0x9b, 0x8b, 0x70, 0x60, 0x5b, 0x69, 0x84,
  0x98, 0xa0, 0x95, 0x77, 0x5c, 0x4a, 0x47, 0x52, 0x5a, 0x68, 0x8d, 0xa8,
  0xc5, 0xd0, 0xba, 0xa1, 0x7e, 0x61, 0x5c, 0x5f, 0x6d, 0x86, 0x8c, 0x90,
  0x8f, 0x87, 0x89, 0x8c, 0x8b, 0x88, 0x7b, 0x68, 0x5f, 0x5f, 0x70, 0x8c,
  0xa0, 0xa7, 0x9b, 0x7e, 0x64, 0x53, 0x54, 0x63, 0x72, 0x76, 0x68, 0x6b,
  0x7e, 0xa1, 0xc8, 0xcf, 0xbd, 0x97, 0x67, 0x4d, 0x4c, 0x5d, 0x83, 0x9e,
  0xa2, 0x99, 0x7f, 0x6f, 0x71, 0x7c, 0x88, 0x8e, 0x7d, 0x6c, 0x61, 0x60,
  0x77, 0x97, 0xaa, 0xb0, 0x9f, 0x7e, 0x67, 0x58, 0x5d, 0x6d, 0x75, 0x71,
  0x56, 0x5b, 0x72, 0x9b, 0xd1, 0xdc, 0xc8, 0x9d, 0x61, 0x42, 0x46, 0x5a,
  0x89, 0xa5, 0x9f, 0x8f, 0x6d, 0x5a, 0x67, 0x7d, 0x95, 0xa1, 0x88, 0x6f,
  0x58, 0x56, 0x70, 0x92, 0xaf, 0xba, 0xac, 0x90, 0x75, 0x64, 0x67, 0x73,
  0x83, 0x83, 0x73, 0x53, 0x2c, 0x4a
};
const unsigned char msgTwo_wav[WAVETABLE_SIZE_GRANULAR] = {
  0x80, 0x87, 0x92, 0x9c, 0xa3, 0xa9, 0xac, 0xad, 0xab, 0xa8, 0xa5, 0xa1,
  0x9c, 0x97, 0x8f, 0x86, 0x7c, 0x72, 0x68, 0x60, 0x5b, 0x5a, 0x5c, 0x61,
  0x66, 0x6a, 0x6f, 0x72, 0x76, 0x7b, 0x82, 0x8a, 0x91, 0x97, 0x9a, 0x98,
  0x93, 0x8a, 0x80, 0x7b, 0x7c, 0x7f, 0x80, 0x7c, 0x71, 0x66, 0x60, 0x62,
  0x6a, 0x74, 0x7a, 0x7b, 0x77, 0x73, 0x6e, 0x6b, 0x6b, 0x6f, 0x75, 0x79,
  0x79, 0x74, 0x6e, 0x6a, 0x6a, 0x6e, 0x7c, 0x8a, 0x98, 0xa5, 0xac, 0xae,
  0xad, 0xad, 0xad, 0xaf, 0xb2, 0xb4, 0xad, 0xa4, 0x96, 0x83, 0x71, 0x64,
  0x5c, 0x58, 0x5a, 0x5c, 0x5d, 0x5c, 0x5c, 0x5a, 0x5d, 0x67, 0x74, 0x82,
  0x90, 0x9c, 0x9f, 0xa0, 0x9c, 0x97, 0x91, 0x8d, 0x88, 0x84, 0x80, 0x7e,
  0x79, 0x6f, 0x61, 0x54, 0x55, 0x63, 0x74, 0x7f, 0x82, 0x7c, 0x73, 0x6b,
  0x68, 0x6c, 0x73, 0x79, 0x7b, 0x74, 0x68, 0x5d, 0x57, 0x5a, 0x64, 0x71,
  0x85, 0x95, 0x9e, 0xa6, 0xa9, 0xad, 0xb4, 0xc1, 0xcb, 0xcf, 0xcb, 0xc2,
  0xab, 0x96, 0x86, 0x76, 0x6e, 0x66, 0x60, 0x54, 0x4a, 0x43, 0x41, 0x45,
  0x55, 0x65, 0x74, 0x82, 0x8a, 0x8f, 0x93, 0x9d, 0xa3, 0xa9, 0xab, 0xa4,
  0x95, 0x86, 0x79, 0x6e, 0x68, 0x67, 0x66, 0x64, 0x62, 0x5b, 0x59, 0x5f,
  0x6e, 0x7f, 0x8b, 0x8c, 0x82, 0x74, 0x6b, 0x67, 0x67, 0x6d, 0x6e, 0x67,
  0x5c, 0x53, 0x4f, 0x54, 0x62, 0x82, 0x9e, 0xab, 0xb9, 0xba, 0xbb, 0xc6,
  0xd8, 0xe3, 0xe2, 0xd4, 0xbe, 0x9d, 0x87, 0x7e, 0x71, 0x67, 0x58, 0x48,
  0x34, 0x31, 0x3c, 0x4c, 0x5c, 0x6f, 0x76, 0x7b, 0x8a, 0x9b, 0xab, 0xb4,
  0xb7, 0xa6, 0x95, 0x89, 0x83, 0x7e, 0x7a, 0x6f, 0x5d, 0x4f, 0x4a, 0x50,
  0x5c, 0x6b, 0x6f, 0x70, 0x73, 0x7a, 0x83, 0x8f, 0x91, 0x86, 0x76, 0x68,
  0x60, 0x5e, 0x62, 0x62, 0x58, 0x4d, 0x4a, 0x50, 0x60, 0x84, 0xaa, 0xb3,
  0xbc, 0xc4, 0xcb, 0xdc, 0xf1, 0xf4, 0xde, 0xc1, 0xad, 0x98, 0x87, 0x7f,
  0x62, 0x44, 0x31, 0x32, 0x35, 0x40, 0x4f, 0x54, 0x5a, 0x73, 0x8f, 0xa2,
  0xb4, 0xb7, 0xb2, 0xac, 0xaf, 0xa3, 0x91, 0x7d, 0x67, 0x57, 0x56, 0x58,
  0x52, 0x4c, 0x4c, 0x52, 0x60, 0x75, 0x7f, 0x81, 0x84, 0x8a, 0x8c, 0x8c,
  0x85, 0x74, 0x66, 0x61, 0x5d, 0x57
};
const unsigned char msgThree_wav[WAVETABLE_SIZE_GRANULAR] = {
  0x86, 0x90, 0x81, 0x8b, 0x91, 0x87, 0x8b, 0x8a, 0x7c, 0x8a, 0x8c, 0x84,
  0x8e, 0x89, 0x8d, 0x9a, 0x82, 0x92, 0x86, 0x87, 0x7c, 0x7a, 0x6f, 0x79,
  0x77, 0x70, 0x73, 0x66, 0x73, 0x76, 0x73, 0x74, 0x7f, 0x6f, 0x83, 0x74,
  0x7c, 0x7f, 0x87, 0x83, 0x93, 0x83, 0x8d, 0x7f, 0x79, 0x7d, 0x7b, 0x7b,
  0x7e, 0x7e, 0x76, 0x89, 0x81, 0x89, 0x8c, 0x8a, 0x8a, 0x89, 0x81, 0x84,
  0x89, 0x84, 0x82, 0x7e, 0x7e, 0x81, 0x84, 0x81, 0x83, 0x83, 0x86, 0x7b,
  0x82, 0x76, 0x7a, 0x83, 0x7b, 0x83, 0x80, 0x80, 0x7a, 0x7e, 0x70, 0x7c,
  0x7b, 0x70, 0x81, 0x85, 0x78, 0x87, 0x8b, 0x7c, 0x92, 0x7c, 0x8a, 0x85,
  0x7a, 0x77, 0x83, 0x6b, 0x81, 0x78, 0x73, 0x82, 0x7c, 0x7d, 0x87, 0x80,
  0x7f, 0x8b, 0x7a, 0x80, 0x87, 0x7d, 0x94, 0x87, 0x86, 0x8d, 0x80, 0x83,
  0x8c, 0x7f, 0x83, 0x7d, 0x85, 0x74, 0x87, 0x77, 0x86, 0x84, 0x78, 0x85,
  0x85, 0x78, 0x80, 0x7d, 0x6d, 0x85, 0x6c, 0x7d, 0x7a, 0x73, 0x80, 0x7c,
  0x82, 0x7e, 0x85, 0x7b, 0x89, 0x80, 0x82, 0x88, 0x86, 0x86, 0x7f, 0x80,
  0x7b, 0x8c, 0x73, 0x87, 0x7c, 0x7f, 0x81, 0x87, 0x75, 0x8e, 0x7b, 0x87,
  0x89, 0x85, 0x87, 0x86, 0x78, 0x8e, 0x7b, 0x7c, 0x86, 0x7a, 0x79, 0x7b,
  0x7a, 0x7c, 0x7f, 0x74, 0x84, 0x7e, 0x7b, 0x87, 0x78, 0x89, 0x87, 0x85,
  0x7e, 0x8c, 0x7c, 0x89, 0x7b, 0x73, 0x8a, 0x74, 0x84, 0x76, 0x80, 0x77,
  0x8c, 0x74, 0x88, 0x83, 0x7b, 0x87, 0x77, 0x80, 0x81, 0x79, 0x85, 0x78,
  0x7f, 0x7e, 0x84, 0x81, 0x86, 0x82, 0x83, 0x8c, 0x7d, 0x85, 0x7d, 0x87,
  0x83, 0x85, 0x80, 0x8f, 0x7a, 0x80, 0x85, 0x78, 0x86, 0x7d, 0x7b, 0x80,
  0x7a, 0x84, 0x84, 0x76, 0x81, 0x7c, 0x7e, 0x82, 0x79, 0x82, 0x7d, 0x7e,
  0x7e, 0x77, 0x80, 0x7e, 0x84, 0x80, 0x85, 0x7a, 0x84, 0x79, 0x89, 0x7c,
  0x85, 0x7e, 0x87, 0x84, 0x84, 0x86, 0x7d, 0x8d, 0x73, 0x82, 0x82, 0x86,
  0x78, 0x8b, 0x75, 0x89, 0x78, 0x86, 0x87, 0x79, 0x7a, 0x81, 0x77, 0x8b,
  0x7d, 0x77, 0x7c, 0x7d, 0x87, 0x85, 0x7d, 0x86, 0x81, 0x78, 0x83, 0x7c,
  0x80, 0x86, 0x7d, 0x8a, 0x84, 0x81, 0x82, 0x82, 0x7f, 0x86, 0x7b, 0x85,
  0x7c, 0x7a, 0x7b, 0x7a, 0x87, 0x7f
};
const unsigned char msgFour_wav[WAVETABLE_SIZE_GRANULAR] = {
  0xa6, 0xc0, 0xa8, 0x98, 0x85, 0x73, 0x65, 0x60, 0x5a, 0x57, 0x5f, 0x67,
  0x6c, 0x72, 0x78, 0x73, 0x6a, 0x5e, 0x4a, 0x3f, 0x3e, 0x54, 0x84, 0xa7,
  0xb6, 0xb7, 0xb9, 0xc5, 0xd8, 0xe4, 0xcf, 0xa2, 0x74, 0x53, 0x44, 0x48,
  0x54, 0x51, 0x4e, 0x5c, 0x74, 0x93, 0xb5, 0xc2, 0xba, 0xb3, 0xad, 0xa0,
  0x8c, 0x75, 0x5e, 0x51, 0x58, 0x62, 0x6a, 0x73, 0x7b, 0x7d, 0x81, 0x88,
  0x82, 0x6f, 0x57, 0x3a, 0x28, 0x2a, 0x39, 0x63, 0x96, 0xb4, 0xc0, 0xcb,
  0xdc, 0xe8, 0xec, 0xd6, 0xa1, 0x6d, 0x50, 0x44, 0x3f, 0x44, 0x44, 0x46,
  0x61, 0x8f, 0xb2, 0xc3, 0xc4, 0xb3, 0xa1, 0xa1, 0x9c, 0x84, 0x66, 0x4e,
  0x4a, 0x5f, 0x7a, 0x83, 0x81, 0x89, 0x93, 0x9a, 0x98, 0x85, 0x63, 0x49,
  0x39, 0x2c, 0x24, 0x21, 0x25, 0x3e, 0x87, 0xd0, 0xf2, 0xf6, 0xe7, 0xd8,
  0xd1, 0xcd, 0xa6, 0x67, 0x3a, 0x2a, 0x33, 0x4a, 0x61, 0x69, 0x78, 0x9e,
  0xc4, 0xd3, 0xcb, 0xac, 0x82, 0x6e, 0x6f, 0x74, 0x74, 0x68, 0x5a, 0x67,
  0x8a, 0xa4, 0xa8, 0xa0, 0x95, 0x8d, 0x88, 0x78, 0x5a, 0x3e, 0x32, 0x2e,
  0x2c, 0x35, 0x3e, 0x47, 0x5c, 0x7d, 0xbe, 0xed, 0xf1, 0xd8, 0xba, 0xac,
  0xa8, 0xa1, 0x78, 0x48, 0x39, 0x53, 0x72, 0x84, 0x8c, 0x88, 0x92, 0xb1,
  0xc3, 0xac, 0x86, 0x66, 0x55, 0x61, 0x74, 0x7a, 0x7f, 0x89, 0x9a, 0xaf,
  0xba, 0xac, 0x8b, 0x75, 0x72, 0x73, 0x70, 0x63, 0x4e, 0x45, 0x51, 0x58,
  0x54, 0x57, 0x57, 0x5a, 0x63, 0x62, 0x5e, 0x6a, 0x9a, 0xcd, 0xcb, 0xb3,
  0xa3, 0xa2, 0xb1, 0xb4, 0x94, 0x6a, 0x62, 0x7b, 0x8e, 0x89, 0x78, 0x70,
  0x7c, 0x96, 0xa3, 0x8e, 0x75, 0x72, 0x81, 0x8e, 0x8b, 0x79, 0x77, 0x9c,
  0xad, 0x93, 0x76, 0x6a, 0x71, 0x84, 0x8f, 0x83, 0x7b, 0x86, 0x8d, 0x7a,
  0x5d, 0x48, 0x3b, 0x3e, 0x4c, 0x51, 0x4c, 0x4d, 0x54, 0x5e, 0x6b, 0x8a,
  0xc6, 0xdc, 0xce, 0xb7, 0xb2, 0xb7, 0xb2, 0x9c, 0x75, 0x5f, 0x6f, 0x8a,
  0x84, 0x71, 0x72, 0x84, 0x9c, 0xab, 0x9d, 0x7d, 0x74, 0x7c, 0x79, 0x66,
  0x55, 0x54, 0x7e, 0xbb, 0xb9, 0x89, 0x7f, 0x9e, 0xb0, 0xa5, 0x85, 0x69,
  0x70, 0x8b, 0x78, 0x3a, 0x21, 0x3a, 0x54, 0x5b, 0x5b, 0x5d, 0x66, 0x7b,
  0x7c, 0x5d, 0x45, 0x44, 0x8a, 0xd5
};
const unsigned char msgFive_wav[WAVETABLE_SIZE_GRANULAR] = {
  0x81, 0x8a, 0x8f, 0x7e, 0x71, 0x7d, 0x88, 0x7d, 0x6e, 0x66, 0x69, 0x70,
  0x65, 0x57, 0x5d, 0x6c, 0x78, 0x77, 0x71, 0x75, 0x7c, 0x72, 0x63, 0x5f,
  0x66, 0x6f, 0x71, 0x70, 0x74, 0x79, 0x7b, 0x76, 0x74, 0x76, 0x78, 0x7c,
  0x7a, 0x7f, 0x86, 0x7f, 0x7e, 0x79, 0x82, 0xc9, 0xeb, 0xc8, 0xa8, 0x96,
  0x9d, 0xa6, 0x82, 0x53, 0x65, 0x8d, 0xa3, 0x97, 0x79, 0x7a, 0x9d, 0xa0,
  0x79, 0x62, 0x74, 0x97, 0x9d, 0x86, 0x73, 0x84, 0x95, 0x86, 0x6d, 0x5f,
  0x6a, 0x7a, 0x6f, 0x5c, 0x5f, 0x70, 0x7d, 0x74, 0x68, 0x6e, 0x77, 0x6f,
  0x5f, 0x5b, 0x66, 0x73, 0x70, 0x6d, 0x79, 0x80, 0x75, 0x68, 0x6b, 0x77,
  0x83, 0x7b, 0x76, 0x83, 0x8d, 0x86, 0x7e, 0x76, 0x80, 0xd2, 0xf1, 0xb9,
  0xa1, 0x96, 0x9b, 0x9e, 0x77, 0x4b, 0x69, 0x99, 0xa4, 0x94, 0x7b, 0x80,
  0x9f, 0x9c, 0x6d, 0x5a, 0x75, 0x9a, 0x9d, 0x85, 0x77, 0x8a, 0x9c, 0x83,
  0x63, 0x60, 0x6f, 0x7d, 0x73, 0x5e, 0x68, 0x7d, 0x7f, 0x72, 0x68, 0x6c,
  0x77, 0x71, 0x5a, 0x56, 0x68, 0x74, 0x70, 0x67, 0x6e, 0x7d, 0x7d, 0x66,
  0x60, 0x71, 0x7b, 0x81, 0x7b, 0x74, 0x85, 0x92, 0x7e, 0x80, 0xce, 0xec,
  0xc9, 0xb0, 0x91, 0x8d, 0xa0, 0x84, 0x50, 0x63, 0x8f, 0xa7, 0xa3, 0x82,
  0x75, 0x96, 0x9e, 0x73, 0x57, 0x5d, 0x7c, 0x9a, 0x95, 0x84, 0x92, 0xa3,
  0x93, 0x6f, 0x53, 0x57, 0x75, 0x7f, 0x71, 0x71, 0x86, 0x91, 0x85, 0x6c,
  0x5e, 0x69, 0x71, 0x65, 0x5a, 0x5f, 0x71, 0x78, 0x6d, 0x62, 0x68, 0x73,
  0x70, 0x63, 0x58, 0x67, 0x7c, 0x7f, 0x7c, 0x84, 0x8a, 0x84, 0x97, 0xc5,
  0xd3, 0xc3, 0xb1, 0x9e, 0x99, 0x98, 0x7e, 0x64, 0x70, 0x8f, 0xa0, 0x9a,
  0x87, 0x83, 0x92, 0x8e, 0x73, 0x5f, 0x63, 0x76, 0x84, 0x80, 0x87, 0xa1,
  0xa9, 0x9b, 0x81, 0x63, 0x5b, 0x60, 0x5c, 0x68, 0x8a, 0x9e, 0x9b, 0x91,
  0x81, 0x75, 0x6e, 0x5a, 0x50, 0x60, 0x72, 0x76, 0x71, 0x6e, 0x70, 0x71,
  0x61, 0x58, 0x5e, 0x63, 0x6e, 0x77, 0x74, 0x81, 0x8e, 0x82, 0x7e, 0x78,
  0x72, 0xa9, 0xe6, 0xc6, 0xa3, 0xa9, 0xa2, 0xa3, 0x8c, 0x5c, 0x5b, 0x8f,
  0x9f, 0x8e, 0x83, 0x82, 0x96, 0xa2, 0x7f, 0x5c, 0x6a, 0x7c, 0x7b, 0x77,
  0x76, 0x8c, 0xaf, 0xa8, 0x84, 0x75
};
const unsigned char msgSix_wav[WAVETABLE_SIZE_GRANULAR] = {
  0x7c, 0x74, 0x6c, 0x6d, 0x83, 0xb9, 0xf1, 0xd9, 0xc9, 0xe4, 0xe3, 0xcc,
  0x9e, 0x74, 0x68, 0x7f, 0x6e, 0x50, 0x5b, 0x80, 0x99, 0x98, 0x90, 0x8e,
  0x9d, 0x8e, 0x63, 0x48, 0x4d, 0x4f, 0x47, 0x49, 0x5b, 0x7e, 0x9e, 0xa2,
  0x9e, 0xad, 0xb0, 0x98, 0x7e, 0x72, 0x6f, 0x75, 0x79, 0x79, 0x83, 0x91,
  0x8d, 0x83, 0x80, 0x7a, 0x72, 0x6e, 0x6b, 0x6c, 0x6c, 0x5f, 0x58, 0x60,
  0x62, 0x59, 0x57, 0x5f, 0x68, 0x6a, 0x6b, 0x6a, 0x73, 0x87, 0x78, 0x65,
  0x6f, 0x75, 0x7d, 0x9a, 0xca, 0xe9, 0xdc, 0xe0, 0xdf, 0xcf, 0xb8, 0x8f,
  0x69, 0x61, 0x67, 0x54, 0x50, 0x62, 0x7f, 0x93, 0x96, 0x90, 0x8e, 0x8d,
  0x74, 0x58, 0x4a, 0x4c, 0x4f, 0x52, 0x5c, 0x73, 0x94, 0xa6, 0xab, 0xaf,
  0xb8, 0xb3, 0x9c, 0x8b, 0x7b, 0x73, 0x71, 0x6f, 0x79, 0x85, 0x83, 0x7b,
  0x78, 0x75, 0x72, 0x6a, 0x64, 0x69, 0x72, 0x70, 0x67, 0x68, 0x6b, 0x67,
  0x5d, 0x53, 0x52, 0x5a, 0x62, 0x70, 0x76, 0x7a, 0x8d, 0x87, 0x79, 0x82,
  0x7e, 0x6e, 0x77, 0x8e, 0xac, 0xdb, 0xd5, 0xc4, 0xd4, 0xd2, 0xb3, 0x8c,
  0x75, 0x5f, 0x60, 0x59, 0x4f, 0x5c, 0x7c, 0x8e, 0x8c, 0x91, 0x90, 0x8e,
  0x7f, 0x69, 0x58, 0x5a, 0x5f, 0x5f, 0x6a, 0x7e, 0x93, 0xa4, 0xaa, 0xad,
  0xae, 0xac, 0x98, 0x87, 0x81, 0x76, 0x74, 0x77, 0x77, 0x7a, 0x80, 0x7a,
  0x72, 0x74, 0x6f, 0x68, 0x67, 0x69, 0x6b, 0x6b, 0x65, 0x5f, 0x5e, 0x5d,
  0x5d, 0x61, 0x65, 0x68, 0x6f, 0x7c, 0x86, 0x86, 0x7e, 0x7f, 0x7f, 0x78,
  0x6d, 0x5f, 0x61, 0x7f, 0xa0, 0xcc, 0xde, 0xcc, 0xd9, 0xd8, 0xbb, 0x92,
  0x75, 0x5e, 0x55, 0x58, 0x4f, 0x59, 0x71, 0x8b, 0x8f, 0x97, 0x9a, 0x95,
  0x8c, 0x7b, 0x68, 0x61, 0x67, 0x64, 0x66, 0x74, 0x85, 0x91, 0x9a, 0xa0,
  0xa9, 0xb1, 0xa8, 0x95, 0x90, 0x88, 0x76, 0x6f, 0x6d, 0x6a, 0x69, 0x67,
  0x63, 0x67, 0x6d, 0x6b, 0x6e, 0x74, 0x75, 0x74, 0x72, 0x6d, 0x67, 0x63,
  0x61, 0x5e, 0x63, 0x6a, 0x6c, 0x6f, 0x85, 0x94, 0x82, 0x77, 0x89, 0x88,
  0x69, 0x5e, 0x64, 0x70, 0x86, 0xa6, 0xc8, 0xca, 0xcf, 0xd7, 0xc4, 0xb0,
  0x9a, 0x7e, 0x62, 0x5b, 0x56, 0x53, 0x5d, 0x6e, 0x80, 0x8d, 0x99, 0x9b,
  0x9c, 0x98, 0x8a, 0x79, 0x72, 0x6a
};
const unsigned char msgSeven_wav[WAVETABLE_SIZE_GRANULAR] = {
  0x72, 0x62, 0x6e, 0x84, 0x99, 0xa1, 0x94, 0x7b, 0x6f, 0x69, 0x78, 0x85,
  0x8b, 0x89, 0x84, 0x82, 0x89, 0x8f, 0x8c, 0x7f, 0x66, 0x56, 0x50, 0x57,
  0x63, 0x68, 0x66, 0x5e, 0x56, 0x56, 0x76, 0xad, 0xd5, 0xec, 0xc5, 0x8a,
  0x55, 0x41, 0x5d, 0x91, 0xb3, 0xc3, 0xaa, 0x81, 0x69, 0x62, 0x73, 0x8c,
  0x93, 0x87, 0x76, 0x63, 0x6a, 0x7e, 0x96, 0xa4, 0x9d, 0x86, 0x75, 0x6b,
  0x73, 0x81, 0x88, 0x8c, 0x88, 0x87, 0x89, 0x8d, 0x89, 0x7e, 0x68, 0x56,
  0x4f, 0x54, 0x62, 0x69, 0x68, 0x5e, 0x54, 0x4e, 0x69, 0xa5, 0xd2, 0xef,
  0xd1, 0x91, 0x57, 0x3f, 0x53, 0x8e, 0xb3, 0xc6, 0xb0, 0x84, 0x6a, 0x62,
  0x72, 0x8c, 0x96, 0x88, 0x76, 0x60, 0x65, 0x7a, 0x95, 0xa4, 0x9f, 0x86,
  0x73, 0x6b, 0x73, 0x87, 0x90, 0x93, 0x88, 0x80, 0x7f, 0x85, 0x89, 0x85,
  0x74, 0x5f, 0x53, 0x53, 0x5e, 0x6a, 0x6a, 0x65, 0x58, 0x50, 0x51, 0x71,
  0xad, 0xd4, 0xec, 0xc8, 0x8c, 0x5a, 0x4a, 0x62, 0x94, 0xb0, 0xb9, 0xa3,
  0x7f, 0x6e, 0x6c, 0x7b, 0x8c, 0x8c, 0x7d, 0x6e, 0x61, 0x6d, 0x84, 0x9a,
  0xa2, 0x98, 0x81, 0x75, 0x75, 0x81, 0x8f, 0x8e, 0x87, 0x7a, 0x77, 0x7f,
  0x8d, 0x93, 0x8b, 0x73, 0x5b, 0x4e, 0x51, 0x5f, 0x6a, 0x6c, 0x64, 0x57,
  0x50, 0x51, 0x70, 0xad, 0xd4, 0xed, 0xcc, 0x90, 0x5d, 0x49, 0x5d, 0x8e,
  0xac, 0xb9, 0xa8, 0x84, 0x71, 0x6a, 0x76, 0x88, 0x8c, 0x7e, 0x72, 0x64,
  0x6e, 0x84, 0x9a, 0xa4, 0x9a, 0x83, 0x75, 0x71, 0x7c, 0x8c, 0x8c, 0x88,
  0x7d, 0x79, 0x81, 0x8f, 0x94, 0x8e, 0x76, 0x5c, 0x4e, 0x4e, 0x5b, 0x68,
  0x6c, 0x66, 0x5c, 0x50, 0x4f, 0x5f, 0x9b, 0xcc, 0xee, 0xe1, 0xa3, 0x66,
  0x45, 0x4e, 0x7c, 0xa8, 0xb8, 0xb3, 0x8c, 0x72, 0x68, 0x72, 0x86, 0x92,
  0x87, 0x77, 0x65, 0x67, 0x7f, 0x98, 0xa9, 0xa0, 0x86, 0x6d, 0x68, 0x72,
  0x8d, 0x96, 0x93, 0x83, 0x75, 0x78, 0x87, 0x94, 0x96, 0x84, 0x66, 0x50,
  0x46, 0x54, 0x64, 0x71, 0x6f, 0x65, 0x57, 0x53, 0x56, 0x75, 0xaf, 0xd2,
  0xe7, 0xc5, 0x8a, 0x5a, 0x4c, 0x5f, 0x92, 0xac, 0xb5, 0xa3, 0x80, 0x70,
  0x6e, 0x7d, 0x8d, 0x90, 0x7e, 0x6f, 0x63, 0x72, 0x89, 0xa1, 0xa4, 0x96,
  0x7b, 0x6a, 0x6c, 0x7d, 0x92, 0x93
};
const unsigned char msgEight_wav[WAVETABLE_SIZE_GRANULAR] = {
  0x86, 0x85, 0x7c, 0x80, 0x7e, 0x7d, 0x7d, 0x82, 0x80, 0x7c, 0x84, 0x7b,
  0x7e, 0x87, 0x79, 0x82, 0x83, 0x80, 0x83, 0x81, 0x80, 0x7e, 0x80, 0x84,
  0x7a, 0x84, 0x7e, 0x78, 0x8b, 0x75, 0x80, 0x87, 0x73, 0x88, 0x82, 0x7c,
  0x83, 0x7a, 0x83, 0x7e, 0x82, 0x7f, 0x7c, 0x86, 0x7b, 0x84, 0x83, 0x7c,
  0x87, 0x83, 0x7d, 0x86, 0x7c, 0x85, 0x82, 0x7a, 0x8c, 0x7a, 0x80, 0x7f,
  0x7a, 0x83, 0x76, 0x83, 0x82, 0x7a, 0x8a, 0x7a, 0x7e, 0x88, 0x7a, 0x88,
  0x83, 0x7c, 0x89, 0x7f, 0x7e, 0x82, 0x7e, 0x82, 0x7e, 0x7f, 0x87, 0x77,
  0x85, 0x82, 0x7d, 0x81, 0x7c, 0x89, 0x7c, 0x7a, 0x86, 0x7d, 0x7d, 0x85,
  0x7a, 0x83, 0x86, 0x7b, 0x81, 0x7d, 0x83, 0x82, 0x7c, 0x82, 0x76, 0x81,
  0x7d, 0x79, 0x7f, 0x7a, 0x7c, 0x75, 0x7d, 0x7d, 0x72, 0x7e, 0x7c, 0x75,
  0x7e, 0x7d, 0x74, 0x79, 0x7d, 0x7c, 0x7b, 0x7a, 0x84, 0x80, 0x83, 0x89,
  0x87, 0x87, 0x8c, 0x91, 0x8c, 0x90, 0x98, 0x96, 0x93, 0x99, 0x99, 0x94,
  0x9a, 0x93, 0x8f, 0x90, 0x89, 0x8c, 0x81, 0x7e, 0x7e, 0x75, 0x74, 0x6f,
  0x71, 0x6d, 0x71, 0x6e, 0x67, 0x6d, 0x68, 0x69, 0x6c, 0x6c, 0x76, 0x6d,
  0x6a, 0x75, 0x6f, 0x73, 0x6c, 0x74, 0x78, 0x74, 0x7a, 0x75, 0x70, 0x7d,
  0x77, 0x76, 0x82, 0x6c, 0x77, 0x78, 0x67, 0x75, 0x82, 0x96, 0x90, 0x8c,
  0xa3, 0xad, 0xb9, 0xbf, 0xbb, 0xc3, 0xd0, 0xc8, 0xb9, 0xab, 0xa5, 0x9c,
  0x8d, 0x7d, 0x6c, 0x6f, 0x73, 0x65, 0x63, 0x72, 0x77, 0x7a, 0x84, 0x84,
  0x88, 0x91, 0x80, 0x7c, 0x7b, 0x72, 0x70, 0x61, 0x5e, 0x56, 0x5b, 0x4f,
  0x47, 0x5a, 0x4f, 0x4f, 0x5b, 0x58, 0x5c, 0x5e, 0x5d, 0x66, 0x65, 0x6c,
  0x66, 0x6b, 0x73, 0x6b, 0x71, 0x73, 0x6a, 0x87, 0xaa, 0xa8, 0xa0, 0xb6,
  0xd2, 0xd4, 0xe0, 0xdd, 0xde, 0xeb, 0xe5, 0xca, 0xb2, 0xa5, 0x98, 0x80,
  0x67, 0x52, 0x4d, 0x4f, 0x42, 0x40, 0x4a, 0x57, 0x66, 0x7c, 0x87, 0x8e,
  0xa6, 0xa9, 0x9a, 0xa0, 0x9d, 0x90, 0x8b, 0x7d, 0x72, 0x68, 0x56, 0x4a,
  0x42, 0x41, 0x3a, 0x40, 0x44, 0x3f, 0x55, 0x54, 0x57, 0x68, 0x65, 0x6f,
  0x73, 0x6c, 0x7a, 0x79, 0x6c, 0x73, 0x73, 0x74, 0x77, 0x8c, 0xb1, 0xa6,
  0xa9, 0xcf, 0xce, 0xde, 0xf2, 0xe4
};
const unsigned char msgNine_wav[WAVETABLE_SIZE_GRANULAR] = {
  0x63, 0x49, 0x4e, 0x5b, 0x75, 0x88, 0x99, 0xaa, 0xbe, 0xd5, 0xe7, 0xef,
  0xf4, 0xf7, 0xf5, 0xee, 0xdd, 0xcb, 0xbe, 0xad, 0x98, 0x82, 0x6c, 0x63,
  0x62, 0x5b, 0x54, 0x4f, 0x48, 0x4a, 0x50, 0x53, 0x59, 0x63, 0x6c, 0x76,
  0x7b, 0x7e, 0x88, 0x8e, 0x8d, 0x88, 0x83, 0x80, 0x7c, 0x75, 0x6e, 0x68,
  0x64, 0x62, 0x5d, 0x58, 0x58, 0x59, 0x58, 0x55, 0x50, 0x50, 0x53, 0x54,
  0x52, 0x50, 0x54, 0x6b, 0x82, 0x91, 0x9f, 0xb1, 0xc7, 0xda, 0xe4, 0xe8,
  0xee, 0xf1, 0xef, 0xe4, 0xd1, 0xc5, 0xbb, 0xa7, 0x90, 0x7a, 0x6a, 0x66,
  0x61, 0x57, 0x51, 0x4e, 0x4b, 0x4f, 0x53, 0x58, 0x61, 0x6a, 0x70, 0x76,
  0x79, 0x80, 0x87, 0x88, 0x86, 0x83, 0x80, 0x7e, 0x79, 0x71, 0x6c, 0x68,
  0x64, 0x60, 0x5a, 0x58, 0x5a, 0x5a, 0x58, 0x55, 0x53, 0x56, 0x57, 0x55,
  0x53, 0x52, 0x61, 0x7b, 0x8a, 0x96, 0xa6, 0xb9, 0xcc, 0xda, 0xe0, 0xe6,
  0xec, 0xec, 0xe7, 0xd8, 0xc9, 0xbf, 0xaf, 0x99, 0x82, 0x6d, 0x64, 0x63,
  0x5c, 0x56, 0x52, 0x4f, 0x53, 0x58, 0x5b, 0x63, 0x6b, 0x72, 0x79, 0x7b,
  0x7d, 0x84, 0x87, 0x85, 0x83, 0x7f, 0x7c, 0x79, 0x72, 0x6d, 0x69, 0x64,
  0x5f, 0x59, 0x56, 0x59, 0x59, 0x57, 0x53, 0x51, 0x53, 0x55, 0x53, 0x50,
  0x50, 0x5f, 0x79, 0x89, 0x94, 0xa4, 0xb7, 0xcb, 0xd9, 0xe1, 0xe8, 0xef,
  0xef, 0xe8, 0xd9, 0xcb, 0xc1, 0xb0, 0x99, 0x81, 0x6d, 0x65, 0x63, 0x5b,
  0x56, 0x54, 0x50, 0x52, 0x56, 0x5a, 0x62, 0x6b, 0x72, 0x78, 0x7a, 0x7f,
  0x88, 0x8d, 0x8c, 0x8a, 0x85, 0x83, 0x7f, 0x77, 0x71, 0x6b, 0x65, 0x62,
  0x5b, 0x57, 0x59, 0x59, 0x57, 0x54, 0x50, 0x50, 0x53, 0x51, 0x4e, 0x4b,
  0x53, 0x6f, 0x84, 0x8e, 0x9d, 0xb1, 0xc8, 0xd8, 0xe0, 0xe6, 0xef, 0xf2,
  0xee, 0xe0, 0xce, 0xc5, 0xb8, 0xa2, 0x8a, 0x72, 0x65, 0x64, 0x5d, 0x56,
  0x51, 0x4c, 0x4f, 0x54, 0x56, 0x5d, 0x67, 0x6f, 0x76, 0x79, 0x7b, 0x86,
  0x8d, 0x8d, 0x89, 0x82, 0x80, 0x7d, 0x74, 0x6c, 0x67, 0x62, 0x60, 0x5b,
  0x56, 0x58, 0x5b, 0x5b, 0x57, 0x50, 0x50, 0x54, 0x54, 0x51, 0x4e, 0x58,
  0x75, 0x88, 0x92, 0xa0, 0xb4, 0xcb, 0xdb, 0xe0, 0xe6, 0xec, 0xee, 0xea,
  0xdb, 0xc9, 0xc1, 0xb4, 0x9f, 0x84
};
const unsigned char msgTen_wav[WAVETABLE_SIZE_GRANULAR] = {
  0x78, 0x87, 0x8c, 0x99, 0xbf, 0xc7, 0xc6, 0xda, 0xe5, 0xd7, 0xd0, 0xcd,
  0xc0, 0xaa, 0x94, 0x87, 0x78, 0x5e, 0x4d, 0x4c, 0x45, 0x38, 0x43, 0x54,
  0x56, 0x61, 0x79, 0x87, 0x90, 0x9b, 0xa8, 0xae, 0xa9, 0xa6, 0xa4, 0x96,
  0x83, 0x78, 0x65, 0x51, 0x45, 0x38, 0x30, 0x2d, 0x27, 0x3a, 0x54, 0x4b,
  0x61, 0x91, 0x97, 0x9e, 0xc7, 0xdd, 0xd5, 0xdf, 0xf2, 0xe3, 0xd1, 0xc8,
  0xb8, 0xa1, 0x87, 0x6e, 0x5f, 0x51, 0x39, 0x30, 0x3c, 0x3c, 0x3f, 0x57,
  0x6d, 0x7d, 0x8d, 0x9f, 0xb1, 0xb7, 0xb4, 0xb5, 0xb5, 0xa8, 0x92, 0x87,
  0x78, 0x58, 0x44, 0x3b, 0x2d, 0x20, 0x22, 0x23, 0x30, 0x57, 0x58, 0x61,
  0x9a, 0xb2, 0xab, 0xcd, 0xf0, 0xe6, 0xdd, 0xed, 0xe2, 0xc3, 0xb3, 0x9d,
  0x82, 0x6d, 0x53, 0x3b, 0x37, 0x32, 0x24, 0x2d, 0x47, 0x5a, 0x74, 0x8c,
  0xa6, 0xc1, 0xc7, 0xc6, 0xce, 0xc9, 0xb5, 0xa6, 0x9c, 0x83, 0x65, 0x51,
  0x3e, 0x2d, 0x1d, 0x15, 0x18, 0x22, 0x24, 0x35, 0x70, 0x84, 0x7e, 0xaf,
  0xde, 0xd5, 0xde, 0xf7, 0xf4, 0xe1, 0xd9, 0xc6, 0xa4, 0x93, 0x75, 0x4e,
  0x42, 0x3b, 0x23, 0x1d, 0x2e, 0x3a, 0x46, 0x64, 0x8d, 0xac, 0xbf, 0xd1,
  0xe0, 0xdd, 0xd1, 0xbf, 0xab, 0x9a, 0x84, 0x69, 0x54, 0x3f, 0x30, 0x25,
  0x1c, 0x17, 0x20, 0x2e, 0x37, 0x43, 0x73, 0xa5, 0xa0, 0xa7, 0xdb, 0xef,
  0xde, 0xe2, 0xe0, 0xd0, 0xc2, 0xac, 0x85, 0x6f, 0x69, 0x4b, 0x2f, 0x32,
  0x3a, 0x39, 0x43, 0x55, 0x6d, 0x8b, 0xa8, 0xbc, 0xc8, 0xd5, 0xd9, 0xc9,
  0xb2, 0xa0, 0x8a, 0x75, 0x61, 0x4f, 0x43, 0x3c, 0x35, 0x31, 0x33, 0x34,
  0x39, 0x4a, 0x56, 0x5e, 0x8e, 0xb2, 0xa9, 0xb1, 0xd2, 0xd8, 0xd2, 0xcf,
  0xbd, 0xae, 0xaa, 0x94, 0x6d, 0x62, 0x5d, 0x4c, 0x46, 0x4a, 0x48, 0x57,
  0x73, 0x7c, 0x83, 0x9e, 0xba, 0xc3, 0xc1, 0xba, 0xb2, 0xac, 0x9b, 0x77,
  0x64, 0x64, 0x5c, 0x4d, 0x43, 0x3e, 0x42, 0x4c, 0x48, 0x3b, 0x44, 0x5b,
  0x62, 0x7c, 0x9b, 0x9e, 0xac, 0xc5, 0xc6, 0xc3, 0xd0, 0xc3, 0xad, 0xa4,
  0x9a, 0x7c, 0x6b, 0x63, 0x53, 0x4e, 0x56, 0x58, 0x5e, 0x74, 0x7f, 0x8b,
  0xa1, 0xb1, 0xb4, 0xb9, 0xb9, 0xaa, 0x9b, 0x8f, 0x7d, 0x6a, 0x63, 0x5b,
  0x56, 0x53, 0x4a, 0x45, 0x4c, 0x4c
};
const unsigned char msgEleven_wav[WAVETABLE_SIZE_GRANULAR] = {
  0x99, 0xb7, 0xa4, 0x98, 0x99, 0x91, 0x83, 0x78, 0x74, 0x7c, 0x79, 0x5b,
  0x4d, 0x51, 0x4f, 0x4c, 0x4d, 0x56, 0x65, 0x65, 0x53, 0x54, 0x55, 0x3f,
  0x37, 0x38, 0x2d, 0x83, 0xc1, 0xa2, 0xb4, 0xd2, 0xd5, 0xe6, 0xcd, 0x9b,
  0xa5, 0xb2, 0x8c, 0x73, 0x6b, 0x67, 0x77, 0x82, 0x7e, 0x93, 0xb7, 0xc2,
  0xbc, 0xaf, 0x9c, 0x8d, 0x7c, 0x6b, 0x6c, 0x72, 0x6d, 0x68, 0x65, 0x5d,
  0x5c, 0x5d, 0x5c, 0x63, 0x65, 0x56, 0x4d, 0x4c, 0x34, 0x1f, 0x16, 0x2d,
  0x9a, 0xcd, 0xab, 0xbb, 0xe5, 0xf1, 0xe4, 0xb4, 0x8c, 0xa0, 0xa9, 0x7a,
  0x58, 0x5d, 0x6b, 0x77, 0x77, 0x6e, 0x89, 0xb3, 0xba, 0xb6, 0xbc, 0xb5,
  0x9a, 0x7e, 0x6c, 0x6b, 0x6e, 0x65, 0x65, 0x72, 0x79, 0x73, 0x6d, 0x6f,
  0x71, 0x68, 0x51, 0x46, 0x44, 0x34, 0x26, 0x1d, 0x18, 0x6f, 0xd6, 0xbe,
  0xaf, 0xe4, 0xf8, 0xeb, 0xc1, 0x87, 0x82, 0xa2, 0x80, 0x4b, 0x51, 0x65,
  0x74, 0x7f, 0x77, 0x82, 0xae, 0xba, 0xa5, 0xaa, 0xbd, 0xab, 0x82, 0x70,
  0x73, 0x77, 0x6d, 0x5c, 0x68, 0x80, 0x82, 0x76, 0x76, 0x7c, 0x75, 0x61,
  0x47, 0x3e, 0x39, 0x2e, 0x25, 0x14, 0x3c, 0xc4, 0xce, 0x9b, 0xd0, 0xef,
  0xe5, 0xd7, 0x9a, 0x77, 0x9c, 0x91, 0x51, 0x4d, 0x65, 0x71, 0x82, 0x83,
  0x7f, 0xa5, 0xbe, 0xa1, 0x95, 0xa5, 0xa2, 0x8e, 0x7d, 0x76, 0x7a, 0x7c,
  0x69, 0x67, 0x7a, 0x7e, 0x7c, 0x7b, 0x7c, 0x75, 0x64, 0x4c, 0x42, 0x3e,
  0x35, 0x30, 0x33, 0x3c, 0x94, 0xe1, 0xa4, 0x99, 0xda, 0xdb, 0xc7, 0xa9,
  0x7b, 0x87, 0x9d, 0x6e, 0x48, 0x68, 0x7d, 0x81, 0x8b, 0x86, 0x96, 0xb7,
  0xa8, 0x89, 0x94, 0xa0, 0x8b, 0x7c, 0x7d, 0x85, 0x87, 0x77, 0x6e, 0x80,
  0x8a, 0x7e, 0x79, 0x7b, 0x79, 0x66, 0x4e, 0x46, 0x45, 0x38, 0x32, 0x39,
  0x43, 0x45, 0x7c, 0xcf, 0xbc, 0xad, 0xd2, 0xd1, 0xc6, 0xb1, 0x87, 0x7c,
  0x8a, 0x75, 0x5a, 0x69, 0x74, 0x7d, 0x8a, 0x8a, 0x93, 0xac, 0xa7, 0x8f,
  0x94, 0x9d, 0x8d, 0x86, 0x8a, 0x86, 0x88, 0x7f, 0x74, 0x80, 0x84, 0x79,
  0x76, 0x76, 0x6b, 0x5b, 0x53, 0x4e, 0x4a, 0x3d, 0x36, 0x3c, 0x47, 0x40,
  0x66, 0xc6, 0xbf, 0xa0, 0xcb, 0xcf, 0xc0, 0xb3, 0x8d, 0x83, 0x95, 0x83,
  0x5f, 0x6b, 0x7c, 0x7a, 0x7c, 0x80
};
const unsigned char msgTwelve_wav[WAVETABLE_SIZE_GRANULAR] = {
  0xa0, 0xba, 0xc8, 0xad, 0x84, 0x58, 0x3b, 0x5a, 0x7a, 0x6c, 0x63, 0x9b,
  0xc0, 0xbf, 0xa8, 0x9a, 0x92, 0x8d, 0x63, 0x38, 0x47, 0x68, 0x78, 0x82,
  0xa2, 0xbd, 0xc0, 0x9d, 0x7b, 0x6d, 0x6d, 0x68, 0x66, 0x73, 0x7c, 0x71,
  0x56, 0x46, 0x3b, 0x31, 0x42, 0x57, 0x69, 0xc5, 0xee, 0xbf, 0xb0, 0xc6,
  0xa4, 0x7c, 0x5f, 0x46, 0x53, 0x73, 0x72, 0x6b, 0x9a, 0xbd, 0xc0, 0xb1,
  0xa5, 0x8c, 0x80, 0x63, 0x3e, 0x3f, 0x5c, 0x75, 0x8c, 0xae, 0xbb, 0xbd,
  0xa6, 0x84, 0x6c, 0x6b, 0x66, 0x69, 0x74, 0x76, 0x6c, 0x58, 0x48, 0x3b,
  0x37, 0x43, 0x5a, 0x5c, 0xad, 0xf3, 0xce, 0xaa, 0xb9, 0xac, 0x8b, 0x71,
  0x45, 0x45, 0x6f, 0x7f, 0x69, 0x89, 0xb8, 0xca, 0xbe, 0xa6, 0x87, 0x7e,
  0x70, 0x3e, 0x2f, 0x53, 0x7b, 0x8d, 0xa4, 0xba, 0xca, 0xb5, 0x8a, 0x68,
  0x66, 0x6b, 0x69, 0x68, 0x6f, 0x72, 0x5f, 0x4c, 0x3f, 0x3c, 0x42, 0x57,
  0x50, 0x89, 0xf1, 0xde, 0xa6, 0xae, 0xb9, 0x97, 0x7d, 0x49, 0x39, 0x66,
  0x86, 0x6d, 0x7b, 0xb4, 0xcd, 0xc8, 0xaa, 0x87, 0x78, 0x74, 0x46, 0x2b,
  0x47, 0x76, 0x8e, 0xa5, 0xb7, 0xc7, 0xc1, 0x96, 0x6b, 0x60, 0x66, 0x65,
  0x68, 0x6b, 0x72, 0x6a, 0x56, 0x43, 0x3d, 0x42, 0x57, 0x5a, 0x74, 0xd4,
  0xe3, 0xb4, 0xaa, 0xb4, 0x96, 0x81, 0x58, 0x3a, 0x56, 0x83, 0x80, 0x7d,
  0xa8, 0xc2, 0xc7, 0xaf, 0x88, 0x6a, 0x6e, 0x57, 0x37, 0x40, 0x6e, 0x94,
  0xab, 0xb7, 0xbc, 0xbf, 0xa0, 0x75, 0x59, 0x5d, 0x66, 0x6e, 0x6d, 0x6e,
  0x6a, 0x5b, 0x49, 0x3c, 0x3c, 0x50, 0x5a, 0x70, 0xd0, 0xe8, 0xbd, 0xad,
  0xb1, 0x92, 0x80, 0x5b, 0x37, 0x51, 0x84, 0x8a, 0x83, 0xa8, 0xc0, 0xc7,
  0xb2, 0x88, 0x63, 0x68, 0x5c, 0x3e, 0x41, 0x6c, 0x96, 0xb0, 0xbb, 0xba,
  0xbc, 0xa0, 0x76, 0x56, 0x56, 0x63, 0x74, 0x75, 0x6f, 0x6c, 0x62, 0x4e,
  0x39, 0x34, 0x49, 0x59, 0x6a, 0xcd, 0xef, 0xc5, 0xb0, 0xb1, 0x8f, 0x7e,
  0x5d, 0x32, 0x49, 0x81, 0x91, 0x88, 0xa8, 0xbb, 0xc7, 0xb9, 0x8b, 0x5b,
  0x60, 0x5d, 0x43, 0x43, 0x63, 0x90, 0xb5, 0xc7, 0xbc, 0xb9, 0xa2, 0x7b,
  0x56, 0x50, 0x5c, 0x74, 0x7d, 0x77, 0x6f, 0x64, 0x53, 0x3d, 0x31, 0x3d,
  0x5b, 0x65, 0xb3, 0xed, 0xd1, 0xb3
};
const unsigned char msgThirteen_wav[WAVETABLE_SIZE_GRANULAR] = {
  0x82, 0x83, 0x82, 0x83, 0x83, 0x82, 0x81, 0x83, 0x80, 0x81, 0x80, 0x82,
  0x81, 0x81, 0x80, 0x80, 0x7e, 0x7d, 0x7d, 0x7c, 0x7d, 0x7c, 0x7c, 0x7c,
  0x7d, 0x7d, 0x7f, 0x7d, 0x80, 0x7d, 0x80, 0x7e, 0x7e, 0x81, 0x80, 0x85,
  0x82, 0x86, 0x84, 0x83, 0x84, 0x83, 0x81, 0x7e, 0x82, 0x81, 0x84, 0x84,
  0x84, 0x81, 0x7d, 0x83, 0x80, 0x81, 0x7f, 0x7e, 0x7f, 0x7e, 0x7f, 0x7f,
  0x80, 0x7f, 0x7e, 0x80, 0x82, 0x7f, 0x7e, 0x80, 0x7e, 0x80, 0x80, 0x7f,
  0x81, 0x7f, 0x82, 0x7e, 0x7f, 0x7e, 0x80, 0x7c, 0x7e, 0x7f, 0x7f, 0x80,
  0x7e, 0x80, 0x7e, 0x81, 0x80, 0x7f, 0x7d, 0x7f, 0x81, 0x7d, 0x83, 0x7f,
  0x81, 0x7f, 0x82, 0x7d, 0x83, 0x82, 0x82, 0x7f, 0x7c, 0x82, 0x80, 0x7f,
  0x81, 0x7f, 0x80, 0x81, 0x83, 0x80, 0x82, 0x80, 0x83, 0x82, 0x82, 0x7f,
  0x85, 0x80, 0x83, 0x80, 0x7f, 0x81, 0x80, 0x7f, 0x7e, 0x7f, 0x7e, 0x82,
  0x7f, 0x7d, 0x7e, 0x7b, 0x7e, 0x7f, 0x7d, 0x7e, 0x80, 0x7c, 0x80, 0x7e,
  0x7e, 0x81, 0x80, 0x80, 0x83, 0x80, 0x80, 0x82, 0x83, 0x82, 0x81, 0x81,
  0x82, 0x80, 0x7e, 0x7d, 0x81, 0x7d, 0x84, 0x7e, 0x81, 0x80, 0x7f, 0x7e,
  0x7f, 0x80, 0x81, 0x80, 0x81, 0x7d, 0x80, 0x80, 0x86, 0x7f, 0x82, 0x7d,
  0x81, 0x81, 0x82, 0x7f, 0x80, 0x81, 0x82, 0x81, 0x84, 0x7b, 0x86, 0x79,
  0x83, 0x7b, 0x7e, 0x79, 0x7d, 0x81, 0x7e, 0x7f, 0x7e, 0x7f, 0x7f, 0x82,
  0x80, 0x7d, 0x80, 0x7e, 0x84, 0x81, 0x83, 0x7c, 0x7f, 0x81, 0x81, 0x81,
  0x82, 0x7e, 0x81, 0x81, 0x7d, 0x81, 0x80, 0x7e, 0x81, 0x82, 0x7e, 0x7c,
  0x80, 0x7e, 0x7e, 0x83, 0x7f, 0x80, 0x81, 0x82, 0x81, 0x83, 0x80, 0x83,
  0x7f, 0x7e, 0x81, 0x81, 0x82, 0x7d, 0x86, 0x7c, 0x83, 0x7f, 0x7f, 0x84,
  0x7f, 0x83, 0x7a, 0x85, 0x79, 0x81, 0x7e, 0x7d, 0x83, 0x80, 0x80, 0x7d,
  0x81, 0x7d, 0x84, 0x80, 0x7e, 0x81, 0x7b, 0x81, 0x80, 0x7d, 0x82, 0x80,
  0x7f, 0x7e, 0x7e, 0x81, 0x81, 0x80, 0x84, 0x82, 0x7a, 0x7e, 0x86, 0x86,
  0x7f, 0x81, 0x7d, 0x7f, 0x84, 0x84, 0x7d, 0x79, 0x80, 0x84, 0x82, 0x7d,
  0x80, 0x84, 0x7c, 0x7e, 0x84, 0x7f, 0x83, 0x7f, 0x80, 0x7f, 0x85, 0x7e,
  0x83, 0x7e, 0x7f, 0x88, 0x7d, 0x7f
};
const unsigned char msgFourteen_wav[WAVETABLE_SIZE_GRANULAR] = {
  0x78, 0x69, 0x6c, 0x73, 0x75, 0x6d, 0x6f, 0x8f, 0xad, 0xb0, 0xa1, 0x98,
  0xa1, 0xaf, 0xae, 0xa6, 0x9c, 0x91, 0x8c, 0x8b, 0x83, 0x77, 0x70, 0x76,
  0x86, 0x99, 0xa2, 0x9a, 0x88, 0x81, 0x82, 0x7e, 0x74, 0x6d, 0x6d, 0x6f,
  0x6b, 0x64, 0x5c, 0x55, 0x54, 0x5b, 0x68, 0x6e, 0x69, 0x69, 0x6f, 0x71,
  0x68, 0x5e, 0x5c, 0x5e, 0x5f, 0x5d, 0x5a, 0x5d, 0x7a, 0xae, 0xcc, 0xc5,
  0xb5, 0xb4, 0xc1, 0xc8, 0xb6, 0x9e, 0x92, 0x88, 0x85, 0x81, 0x75, 0x69,
  0x67, 0x74, 0x84, 0x86, 0x7e, 0x85, 0x9c, 0xb9, 0xc3, 0xab, 0x86, 0x71,
  0x70, 0x76, 0x71, 0x62, 0x5d, 0x66, 0x74, 0x75, 0x65, 0x53, 0x54, 0x61,
  0x6b, 0x68, 0x5d, 0x56, 0x57, 0x56, 0x52, 0x51, 0x4e, 0x4c, 0x51, 0x57,
  0x75, 0xb7, 0xe4, 0xda, 0xc1, 0xba, 0xc9, 0xd3, 0xb9, 0x98, 0x85, 0x78,
  0x7c, 0x86, 0x7b, 0x69, 0x65, 0x79, 0x95, 0x97, 0x87, 0x83, 0x88, 0x96,
  0xab, 0xb5, 0xa8, 0x8b, 0x75, 0x78, 0x7d, 0x70, 0x60, 0x61, 0x71, 0x80,
  0x81, 0x74, 0x5f, 0x4e, 0x50, 0x59, 0x56, 0x4e, 0x4c, 0x52, 0x55, 0x52,
  0x51, 0x50, 0x4d, 0x50, 0x57, 0x7c, 0xc9, 0xf5, 0xdc, 0xbc, 0xb7, 0xc7,
  0xcf, 0xb4, 0x90, 0x74, 0x69, 0x80, 0x93, 0x7c, 0x64, 0x6a, 0x86, 0x9e,
  0x96, 0x89, 0x89, 0x83, 0x86, 0x9e, 0xad, 0xa4, 0x8c, 0x7d, 0x7e, 0x76,
  0x6c, 0x6e, 0x6f, 0x73, 0x81, 0x88, 0x7b, 0x5e, 0x4b, 0x51, 0x53, 0x4b,
  0x48, 0x46, 0x45, 0x4c, 0x56, 0x5d, 0x52, 0x42, 0x4b, 0x68, 0xaa, 0xec,
  0xe1, 0xb7, 0xae, 0xbe, 0xd2, 0xc3, 0x94, 0x78, 0x72, 0x85, 0x9e, 0x8a,
  0x68, 0x6e, 0x8b, 0xa4, 0x9f, 0x85, 0x7e, 0x80, 0x84, 0x8d, 0x87, 0x89,
  0xa2, 0xa9, 0x93, 0x74, 0x65, 0x73, 0x7d, 0x77, 0x75, 0x74, 0x7a, 0x7f,
  0x6a, 0x4d, 0x3b, 0x3f, 0x53, 0x5a, 0x55, 0x53, 0x53, 0x57, 0x53, 0x46,
  0x4f, 0x58, 0x64, 0xb4, 0xf6, 0xdb, 0xb5, 0xb5, 0xc3, 0xc7, 0xaf, 0x94,
  0x78, 0x64, 0x87, 0x9f, 0x7b, 0x63, 0x78, 0x9a, 0xa6, 0x93, 0x89, 0x84,
  0x79, 0x86, 0x88, 0x6e, 0x75, 0xa7, 0xc6, 0xa2, 0x6b, 0x67, 0x7c, 0x82,
  0x80, 0x74, 0x6c, 0x7f, 0x8d, 0x74, 0x42, 0x2e, 0x48, 0x59, 0x4f, 0x4d,
  0x53, 0x58, 0x60, 0x5d, 0x4e, 0x44
};
const unsigned char msgFifteen_wav[WAVETABLE_SIZE_GRANULAR] = {
  0x75, 0x6f, 0x85, 0x8c, 0x70, 0x5f, 0x84, 0x8e, 0x6b, 0x75, 0x85, 0x77,
  0x87, 0x8d, 0x7f, 0x7a, 0x86, 0x83, 0x72, 0x80, 0x90, 0x73, 0x77, 0x93,
  0x7b, 0x96, 0x91, 0x64, 0x7b, 0xaa, 0x7f, 0x8c, 0xd7, 0x61, 0x3c, 0xbb,
  0x8e, 0x1c, 0x8b, 0xa7, 0x57, 0x9e, 0x92, 0x45, 0x6f, 0x9d, 0x8c, 0x7c,
  0x6c, 0x82, 0x7c, 0x8b, 0x7b, 0x67, 0x6a, 0x7c, 0x81, 0x7e, 0x81, 0x6f,
  0x81, 0x7c, 0x82, 0x82, 0x7d, 0x7e, 0x7b, 0x7f, 0x8c, 0x7e, 0x7d, 0x81,
  0x6c, 0x7a, 0x9b, 0x82, 0x70, 0x87, 0x7c, 0x86, 0x8b, 0x83, 0x79, 0x7e,
  0x8e, 0x7b, 0x7d, 0x81, 0x73, 0x79, 0xa0, 0x7a, 0x5d, 0xa2, 0x7b, 0x6b,
  0x9f, 0x74, 0x75, 0x8e, 0x8c, 0x6e, 0x79, 0x94, 0x80, 0x73, 0x8d, 0x8e,
  0x70, 0x8b, 0x8d, 0x71, 0x78, 0x8f, 0x74, 0x78, 0x88, 0x84, 0x79, 0x82,
  0x84, 0x6f, 0x8c, 0x91, 0x68, 0x8e, 0x87, 0x76, 0x9a, 0x93, 0x81, 0x6e,
  0x97, 0x8c, 0x79, 0x7f, 0x79, 0x7e, 0x84, 0x99, 0x83, 0x5e, 0x82, 0x97,
  0x7e, 0x80, 0x74, 0x79, 0x87, 0x8d, 0xa3, 0x91, 0x5e, 0x77, 0x95, 0x65,
  0x76, 0x98, 0x60, 0x63, 0x9e, 0x97, 0x75, 0x7c, 0x9e, 0x75, 0x6e, 0x95,
  0x7b, 0x56, 0x8d, 0xa5, 0x65, 0x7d, 0x8f, 0x6b, 0x7a, 0x9e, 0x78, 0x5e,
  0x8d, 0x93, 0x82, 0x8a, 0x80, 0x5c, 0x72, 0x9a, 0x82, 0x7c, 0x87, 0x77,
  0x79, 0x92, 0x88, 0x6c, 0x75, 0x7f, 0x85, 0x8e, 0x8e, 0x83, 0x75, 0x80,
  0x81, 0x78, 0x7c, 0x74, 0x77, 0x86, 0x85, 0x82, 0x87, 0x79, 0x6f, 0x78,
  0x81, 0x93, 0x89, 0x8c, 0x8b, 0x70, 0x7b, 0x8a, 0x87, 0x78, 0x7e, 0x8d,
  0x83, 0x80, 0x82, 0x70, 0x6c, 0x77, 0x8d, 0x8c, 0x89, 0x8f, 0x7c, 0x71,
  0x7d, 0x8b, 0x85, 0x7f, 0x7c, 0x74, 0x73, 0x84, 0x8c, 0x80, 0x77, 0x7b,
  0x7c, 0x81, 0x91, 0x84, 0x64, 0x60, 0x75, 0x8f, 0x9a, 0x93, 0x7b, 0x6a,
  0x81, 0x95, 0x8c, 0x79, 0x65, 0x6f, 0x8f, 0x9e, 0x9c, 0x7d, 0x66, 0x70,
  0x7c, 0x8b, 0x97, 0x87, 0x76, 0x79, 0x77, 0x80, 0x8d, 0x83, 0x76, 0x70,
  0x6c, 0x76, 0x88, 0x94, 0x86, 0x6b, 0x69, 0x76, 0x89, 0xa3, 0x9d, 0x7f,
  0x6e, 0x6b, 0x82, 0x9d, 0x99, 0x85, 0x72, 0x61, 0x67, 0x87, 0x96, 0x94,
  0x84, 0x67, 0x5e, 0x6c, 0x91, 0xa8
};
const unsigned char msgSixteen_wav[WAVETABLE_SIZE_GRANULAR]= {
  0x7b, 0x80, 0x8c, 0x93, 0x8e, 0x88, 0x7e, 0x72, 0x70, 0x74, 0x80, 0x95,
  0xaf, 0xc7, 0xde, 0xe7, 0xe4, 0xd8, 0xbd, 0xa3, 0x88, 0x72, 0x66, 0x60,
  0x61, 0x67, 0x6d, 0x71, 0x78, 0x7a, 0x81, 0x88, 0x8d, 0x94, 0x92, 0x8d,
  0x82, 0x72, 0x61, 0x55, 0x4d, 0x4e, 0x59, 0x6c, 0x8b, 0xaa, 0xc6, 0xd5,
  0xce, 0xb7, 0x92, 0x6b, 0x4d, 0x40, 0x41, 0x52, 0x65, 0x73, 0x79, 0x73,
  0x69, 0x5e, 0x56, 0x57, 0x5c, 0x60, 0x64, 0x61, 0x5b, 0x55, 0x50, 0x52,
  0x59, 0x64, 0x74, 0x84, 0x8f, 0x9a, 0x99, 0x92, 0x88, 0x7a, 0x72, 0x72,
  0x7c, 0x91, 0xaf, 0xc8, 0xe1, 0xe9, 0xe3, 0xd3, 0xb5, 0x99, 0x7e, 0x6b,
  0x62, 0x61, 0x65, 0x6b, 0x71, 0x72, 0x77, 0x78, 0x7f, 0x88, 0x90, 0x99,
  0x99, 0x93, 0x86, 0x73, 0x60, 0x52, 0x4b, 0x4d, 0x5c, 0x74, 0x96, 0xb8,
  0xd0, 0xd8, 0xcb, 0xab, 0x84, 0x5e, 0x44, 0x3e, 0x47, 0x59, 0x6c, 0x75,
  0x75, 0x6c, 0x60, 0x58, 0x55, 0x57, 0x5d, 0x62, 0x64, 0x62, 0x5c, 0x58,
  0x54, 0x55, 0x5c, 0x66, 0x76, 0x87, 0x93, 0x9a, 0x95, 0x8d, 0x82, 0x73,
  0x72, 0x79, 0x8d, 0xaf, 0xcf, 0xea, 0xf7, 0xf0, 0xdb, 0xbb, 0x96, 0x77,
  0x62, 0x57, 0x5b, 0x60, 0x68, 0x70, 0x70, 0x73, 0x75, 0x7a, 0x85, 0x91,
  0x9b, 0xa1, 0x9b, 0x8b, 0x77, 0x5e, 0x4c, 0x44, 0x46, 0x56, 0x73, 0x96,
  0xbc, 0xd7, 0xdd, 0xd2, 0xaf, 0x85, 0x5e, 0x43, 0x3d, 0x45, 0x56, 0x68,
  0x71, 0x6f, 0x69, 0x5e, 0x58, 0x58, 0x5b, 0x62, 0x67, 0x68, 0x65, 0x5f,
  0x58, 0x56, 0x58, 0x5a, 0x67, 0x6f, 0x80, 0x8f, 0x98, 0x9f, 0x96, 0x8b,
  0x7a, 0x70, 0x70, 0x80, 0x9c, 0xbd, 0xdd, 0xed, 0xef, 0xde, 0xc1, 0x9f,
  0x7f, 0x69, 0x5d, 0x5f, 0x64, 0x6d, 0x72, 0x72, 0x73, 0x71, 0x77, 0x80,
  0x8e, 0x9b, 0xa1, 0x9e, 0x90, 0x7b, 0x63, 0x52, 0x49, 0x4d, 0x5c, 0x6f,
  0x8b, 0xa6, 0xbf, 0xce, 0xca, 0xb9, 0x97, 0x73, 0x54, 0x43, 0x41, 0x4f,
  0x62, 0x71, 0x7b, 0x75, 0x6c, 0x60, 0x57, 0x55, 0x57, 0x5d, 0x63, 0x68,
  0x68, 0x67, 0x5f, 0x5b, 0x5a, 0x5d, 0x67, 0x75, 0x85, 0x94, 0x9b, 0x9a,
  0x8b, 0x79, 0x69, 0x61, 0x68, 0x7c, 0x9d, 0xc2, 0xe0, 0xf3, 0xf2, 0xdf,
  0xc1, 0x9e, 0x7d, 0x69, 0x5e, 0x5d
};
  
  //Granular 
  float wavetablesGranular[WAVETABLE_SIZE_GRANULAR];
  float phaseGranular = 0.0f; // phaseGranular accumulator for oscillator
  //OG
  float wavetables[WAVETABLE_SIZE];
  float phase = 0.0f; // Phase accumulator for oscillator
  float frequency = 440.0f; // Default frequency    
  float currentVoltage = 0.0f;
  float amplitude = 40.0f; 
  std::random_device rd;
  std::mt19937 gen{rd()};
  std::uniform_real_distribution<float> dis{-amplitude, amplitude}; // Range -5V to +5V
  // FM
  float phase1 = 0.0f;
  float phase2 = 0.0f;
  float freq1 = 0.0f;
  float freq2 = 0.0f;
  float minFreq = 900.0f;
  float maxFreq = 920.0f;
  float triangleWave(float phaseFM) {
  phaseFM = phaseFM - floor(phaseFM);
  return 2.0f * fabs(2.0f * phaseFM - 1.0f) - 1.0f;
  }
   //PD
   float minFreqPD = 150.0f;
   float maxFreqPD = 275.0f;
   float phase3 = 0.0f;
   float freq3 = 0.0f;
   float triangleWave2(float phaseFM) {
   phaseFM = phaseFM - floor(phaseFM);
   return 2.0f * fabs(2.0f * phaseFM - 1.0f) - 1.0f;
   }
   float sawtoothWave(float phasePD) {
   return 2.0f * (phasePD - floor(phasePD + 0.5f)); 
   }

	// Envelope control variables for decay
  float envelopeValue = 1.0f;  // Envelope output value (for volume control)
  float decayTime = 5.0f;      // Decay time in ms (5ms as requested)
  float decayAlpha = 0.0f;     // Exponential decay coefficient
  bool pulseTriggered = false; // Flag to check if pulse was triggered
  float pulseTime = 0.0f;      // Time tracking for pulse duration
  bool lastBangState = false;  // Previous state of the Bang input

  int ratSelect = 1;

void process (const ProcessArgs &args) override {
  //Scratch param
	float cvInput2 = inputs[SCRATCH_CV_INPUT].getVoltage();  // Read CV input
	float normalizedCV2 = (cvInput2 + 5.0f) / 10.0f; // Map -5V -> 0.0 and 5V -> 1.0
	float knob2Param = params[SCRATCH_PARAM].getValue() + 0.05;  // Original knob value
	float knob2Value = knob2Param + (normalizedCV2 - 0.5f);  // Apply the CV input as an offset
	float controlValue2 = clamp(knob2Value, 0.0f, 1.0f);

  // DIG Param
	float cvInput3 = inputs[DIG_CV_INPUT].getVoltage();  // Read CV input
	float normalizedCV3 = (cvInput3 + 5.0f) / 10.0f; // Map -5V -> 0.0 and 5V -> 1.0
	float knob3Param = params[DIG_PARAM].getValue() + 0.05;  // Original knob value
	float knob3Value = knob3Param + (normalizedCV3 - 0.5f);  // Apply the CV input as an offset
	float controlValue3 = clamp(knob3Value, 0.0f, 1.0f);
	float WAVETABLE_LENGTH = std::min(controlValue3 * 318.0f + 10.0f, 318.0f);
  float foldThreshold = 0.25f + (controlValue3 * 0.25);
	float distortion = foldThreshold * 500; 
	
	//Chew param
	float cvInput = inputs[CHEW_CV_INPUT].getVoltage();  // Read CV input
	float normalizedCV = (cvInput + 5.0f) / 10.0f; // Map -5V -> 0.0 and 5V -> 1.0
	float knob1Param = params[CHEW_PARAM].getValue() + 0.05;  // Original knob value
	float knob1Value = knob1Param + (normalizedCV - 0.5f);  // Apply the CV input as an offset
	float controlValue = clamp(knob1Value, 0.0f, 1.0f);
	frequency = controlValue * args.sampleRate; // Scale the DIG_PARAM for frequency range

    // OG
    const unsigned char* wavetablesData[] = {
        one_wav, two_wav, three_wav, four_wav, five_wav,
        six_wav, seven_wav, eight_wav, nine_wav, ten_wav,
        eleven_wav, twelve_wav, thirteen_wav, fourteen_wav, fifteen_wav,
        sixteen_wav, seventeen_wav, eighteen_wav, nineteen_wav, twenty_wav,
        twentyOne_wav, twentyTwo_wav, twentyThree_wav, twentyFour_wav
      };
    int index = static_cast<int>(controlValue2 * 23);
    if (index >= 0 && index < 24) {
        // Normalize the selected wave and assign to wavetables
        for (int j = 0; j < WAVETABLE_SIZE; j++) {
            wavetables[j] = (float)(wavetablesData[index][j] - 238) / 238.0f;
        }
    }
    
		// Granular 
		const unsigned char* wavetablesDataGranular[] = {
			msgOne_wav, msgTwo_wav, msgThree_wav, msgFour_wav, msgFive_wav,
			msgSix_wav, msgSeven_wav, msgEight_wav, msgNine_wav, msgTen_wav,
			msgEleven_wav, msgTwelve_wav, msgThirteen_wav, msgFourteen_wav,
			msgFifteen_wav, msgSixteen_wav
		  };
    int indexGranular = static_cast<int>(controlValue2 * 15);
    float phaseGranularIncrement = frequency / args.sampleRate;

// OG
float phaseIncrement = frequency / args.sampleRate;
phase += phaseIncrement;
phase = fmod(phase, WAVETABLE_SIZE);
int phaseIndex = static_cast<int>(phase);
float outputSample = wavetables[phaseIndex];
float foldedSample = outputSample;
if (foldedSample > foldThreshold) {
    foldedSample = foldThreshold - (foldedSample - foldThreshold);  // Fold back when exceeding threshold
} else if (foldedSample < -foldThreshold) {
    foldedSample = -foldThreshold - (foldedSample + foldThreshold); // Fold back when below threshold
}

 // FM
 float fmDepth = controlValue2; 
 float pitch1 = controlValue;
 float pitch2 = controlValue3;
 phase2 += freq2 / args.sampleRate;
 if (phase2 >= 1.0f) phase2 -= 1.0f;
 float modulator = triangleWave(phase2) * 10.0f;  // Increased amplitude for more modulation
 freq1 = pitch1 * (minFreq + (maxFreq - minFreq) * pitch1) + modulator * fmDepth * 100.0f; // Increased modulation depth
 phase1 += freq1 / args.sampleRate;
 if (phase1 >= 1.0f) phase1 -= 1.0f;
 float fmOutput = triangleWave(phase1) * 5.0f;  // Output of oscillator 1 (carrier)

//PD
float pdDrive = controlValue2 * 32.f; 
float pitch3 = controlValue; 
int DIG = (int)(controlValue3 * 7.0f) + 1;  
float octaveMultiplier = (float)DIG;  
freq3 = pitch3 * octaveMultiplier * (minFreqPD + (maxFreqPD - minFreqPD) * pitch3);  
phase3 += freq3 / args.sampleRate;
if (phase3 >= 1.0f) phase3 -= 1.0f;
float waveformOutput;
   
// Switches
float chaos = 0.0f; 
bool switchState = params[RATSWITCH_PARAM].getValue() > 0.5f;
bool gateState = inputs[MUSKRAT_INPUT].getVoltage() > 0.5f;
if(switchState || gateState){
  waveformOutput = triangleWave2(phase3) * 5.0f;
  chaos = dis(gen); 
	phaseGranular -= phaseGranularIncrement;
    if (phaseGranular < 0) {
        phaseGranular += WAVETABLE_LENGTH; // Wrap phaseGranular to the end of the wavetable
    }
	freq2 = pitch2 * (1.0f + (20.0f - 1.0f) * pitch1);
}
else{
  chaos = 1; 
  phaseGranular += phaseGranularIncrement;
  phaseGranular = fmod(phaseGranular, WAVETABLE_LENGTH);
  freq2 = pitch2 * (minFreq + (maxFreq - minFreq) * pitch1);
  waveformOutput = sawtoothWave(phase3) * 5.0f;
}	      

//OG
foldedSample = (foldedSample * distortion) + chaos;  // Increased amplification for more pronounced effect
foldedSample += 1.0f;  // Apply offset to ensure the signal stays in a desired range
foldedSample = clamp(foldedSample, -5.0f, 5.0f);
const float cutoffFrequency = 8000.0f; // 10 kHz cutoff
float alpha = 1.0f / (1.0f + (args.sampleRate / (2.0f * M_PI * cutoffFrequency)));
static float previousOutput = 0.0f;
float filteredSample = alpha * foldedSample + (1.0f - alpha) * previousOutput;
previousOutput = filteredSample;

//Granular
if (indexGranular >= 0 && indexGranular < 16) {
	for (int j = 0; j < WAVETABLE_LENGTH; j++) {
		wavetablesGranular[j] = (float)(wavetablesDataGranular[indexGranular][j] - 318) / 318.0f;
	}
}
int phaseGranularIndex = static_cast<int>(phaseGranular);
float outputSampleGranular = wavetablesGranular[phaseGranularIndex];

// PD 
float pdOutput = waveformOutput * pdDrive; 
pdOutput = clamp(pdOutput, -5.0f, 5.0f);

//Master decay 
int range = (int)params[RANGE_PARAM].getValue(); // Read the RANGE_PARAM value
switch (range) {
	case 0:
		decayTime = 5.0f + (params[TAIL_PARAM].getValue() * 25.0f); // 5ms to 30ms range
		break;
	case 1:
		decayTime = 30.0f + (params[TAIL_PARAM].getValue() * 170.0f); // 30ms to 200ms range
		break;
	case 2:
		decayTime = 200.0f + (params[TAIL_PARAM].getValue() * 3800.0f); // 200ms to 4000ms range
		break;
}
decayAlpha = exp(-1.0f / (args.sampleRate * (decayTime / 1000.0f))); // Calculate decay coefficient based on decay time
bool bangState = inputs[BANG_INPUT].getVoltage() > 0.5f;
if (bangState && !lastBangState) {
	pulseTriggered = true;
	envelopeValue = 1.0f;  // Start the envelope with full amplitude
	pulseTime = decayTime * (args.sampleRate / 1000.0f);
}
lastBangState = bangState;
if (pulseTriggered) {
	envelopeValue *= decayAlpha;  // Apply exponential decay
	if (envelopeValue < 0.01f) {  // End decay when value is small enough
		envelopeValue = 0.0f;
		pulseTriggered = false;
	}
} else {
	envelopeValue = 0.0f; // Reset envelope when no pulse is triggered
}

// Granular
float granularOutput = (((outputSampleGranular * 5.f) + 2.5f) * 5.0f) * envelopeValue; 
granularOutput = clamp(granularOutput, -5.0f, 5.0f);

float selectPot = params[SELECT_PARAM].getValue();


if(selectPot < 0.43){
ratSelect = 1;
}
if (selectPot > 0.43 && selectPot < 0.54){
ratSelect = 2; 
}
if (selectPot > 0.54 && selectPot < 0.66){
ratSelect = 3; 
}
if (selectPot > 0.66){
ratSelect = 4; 
}


switch (ratSelect){
case 1: // Muskrat
outputs[AUDIO_OUTPUT].setVoltage(filteredSample * envelopeValue);
break; 
case 2: // F
outputs[AUDIO_OUTPUT].setVoltage(fmOutput * envelopeValue);
break;
case 3: // G
outputs[AUDIO_OUTPUT].setVoltage(pdOutput * envelopeValue);
break; 
case 4: // P
outputs[AUDIO_OUTPUT].setVoltage(granularOutput);
break; 
}

//LED 
float ledBrightness = envelopeValue;  // Map -5V to +5V range to 0-1
lights[LED_LIGHT].setBrightness(ledBrightness);  // Set LED brightness
}

};

struct MuskratWidget : ModuleWidget {
	MuskratWidget(Muskrat* module) {
		setModule(module);
		setPanel(createPanel(asset::plugin(pluginInstance, "res/Muskrat.svg")));
        
        addChild(createWidget<ScrewSilver>(Vec(RACK_GRID_WIDTH, 0)));
		addChild(createWidget<ScrewSilver>(Vec(box.size.x - 6 * RACK_GRID_WIDTH, 0)));
        addChild(createWidget<ScrewSilver>(Vec(RACK_GRID_WIDTH, RACK_GRID_HEIGHT - RACK_GRID_WIDTH)));
        addChild(createWidget<ScrewSilver>(Vec(box.size.x - 6 * RACK_GRID_WIDTH, RACK_GRID_HEIGHT - RACK_GRID_WIDTH)));
        addChild(createWidget<ScrewSilver>(Vec(box.size.x - 3 * RACK_GRID_WIDTH, 0)));
		addChild(createWidget<ScrewSilver>(Vec(box.size.x - 3 * RACK_GRID_WIDTH, RACK_GRID_HEIGHT - RACK_GRID_WIDTH)));

        addParam(createParamCentered<CKSSThree>(mm2px(Vec(24.513, 20.315)), module, Muskrat::RANGE_PARAM));
        addParam(createParamCentered<CKSS>(mm2px(Vec(24.478, 108.396)), module, Muskrat::RATSWITCH_PARAM));

        addParam(createParamCentered<RoundBlackKnob>(mm2px(Vec(38.603, 19.421)), module, Muskrat::TAIL_PARAM));
        addParam(createParamCentered<RoundBlackKnob>(mm2px(Vec(38.334, 41.886)), module, Muskrat::SCRATCH_PARAM));
        addParam(createParamCentered<RoundBlackKnob>(mm2px(Vec(38.346, 64.212)), module, Muskrat::DIG_PARAM));
        addParam(createParamCentered<RoundBlackKnob>(mm2px(Vec(38.321, 86.273)), module, Muskrat::CHEW_PARAM));
		addParam(createParamCentered<RoundBlackKnob>(mm2px(Vec(62, 50)), module, Muskrat::SELECT_PARAM));

        addInput(createInputCentered<PJ301MPort>(mm2px(Vec(10.549, 19.244)), module, Muskrat::BANG_INPUT));
        addInput(createInputCentered<PJ301MPort>(mm2px(Vec(10.545, 41.872)), module, Muskrat::SCRATCH_CV_INPUT));
        addInput(createInputCentered<PJ301MPort>(mm2px(Vec(10.548, 64.291)), module, Muskrat::DIG_CV_INPUT));
        addInput(createInputCentered<PJ301MPort>(mm2px(Vec(10.467, 86.24)), module, Muskrat::CHEW_CV_INPUT));
        addInput(createInputCentered<PJ301MPort>(mm2px(Vec(10.572, 108.196)), module, Muskrat::MUSKRAT_INPUT));

        addOutput(createOutputCentered<PJ301MPort>(mm2px(Vec(38.325, 108.226)), module, Muskrat::AUDIO_OUTPUT));

        addChild(createLightCentered<MediumLight<RedLight>>(mm2px(Vec(38.295, 98.285)), module, Muskrat::LED_LIGHT));
	}
};


Model* modelMuskrat = createModel<Muskrat, MuskratWidget>("Muskrat");